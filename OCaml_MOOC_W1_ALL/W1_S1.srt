1
00:00:00,190 --> 00:00:00,810
Welcome back!

2
00:00:00,810 --> 00:00:05,040
So let's continue our exposition of
basic data types in OCaml.

3
00:00:05,040 --> 00:00:10,269
And we continue with the type
of floating point numbers.

4
00:00:10,269 --> 00:00:15,739
The values of floating point numbers are always
written in a way which allows to indicate

5
00:00:15,740 --> 00:00:20,280
the fact that you really have
a floating point number and not an integer,

6
00:00:20,290 --> 00:00:22,870
which means you have to use
either a decimal point,

7
00:00:22,870 --> 00:00:26,280
or an exponential, or even both.

8
00:00:26,280 --> 00:00:27,980
In the same way,

9
00:00:27,990 --> 00:00:33,239
the operators on floating points numbers have
to be written with a dot at the end,

10
00:00:33,239 --> 00:00:36,979
so you have <u>+.</u>, <u>-.</u>, and so on...

11
00:00:36,980 --> 00:00:41,100
You have of course all the usual functions
on floating point numbers,

12
00:00:41,109 --> 00:00:45,829
like square root, sinus, cosinus, ceiling,
floor, and so on...

13
00:00:46,200 --> 00:00:49,440
So, this is very important,
so let me just repeat it,

14
00:00:49,449 --> 00:00:53,869
you have to indicate in the writing of a constant

15
00:00:53,869 --> 00:00:58,169
the fact that you are using
floating point numbers and not integers.

16
00:00:58,169 --> 00:01:01,689
So you always have to use a dot or an exponent

17
00:01:01,689 --> 00:01:04,300
in the constants of floating point type,

18
00:01:04,300 --> 00:01:09,540
and you always have to use a dot in the operations working on floating point numbers.

19
00:01:12,600 --> 00:01:15,800
Now, let's have a look at
some basic floating point expressions.

20
00:01:15,800 --> 00:01:20,260
Here we have an addition
between two floating point constants.

21
00:01:20,260 --> 00:01:25,240
Then we have a multiplication
between two floating point constants.

22
00:01:25,240 --> 00:01:32,060
Again, the last two examples demonstrate
that you are really not allowed to mix integers with

23
00:01:32,070 --> 00:01:35,390
floating points without using explicit conversion.

24
00:01:35,390 --> 00:01:38,470
Like, for instance, trying to
calculate an integer sum

25
00:01:38,470 --> 00:01:43,510
between an integer and a floating point number
gives us a typing error.

26
00:01:43,510 --> 00:01:49,910
And, exactly in the same way, trying to apply
floating point multiplication to two integer values

27
00:01:49,910 --> 00:01:51,890
gives us a typing error.

28
00:01:53,780 --> 00:01:56,900
This is in fact an important principle in OCaml.

29
00:01:56,900 --> 00:01:59,740
All the basic types are disjoint,

30
00:01:59,740 --> 00:02:04,200
which means there is no value which belongs
at the same time to one type

31
00:02:04,200 --> 00:02:07,300
and also to a different type.

32
00:02:07,760 --> 00:02:10,300
In contrast to some other programming languages

33
00:02:10,300 --> 00:02:14,520
there is no implicit conversion between data types,

34
00:02:14,520 --> 00:02:17,320
which means that if you want to have a conversion

35
00:02:17,320 --> 00:02:21,660
then you have to write down
the explicit conversion operator.

36
00:02:21,660 --> 00:02:24,000
There is of course a very good reason for this,

37
00:02:24,010 --> 00:02:29,170
the reason is that implicit conversion between
types wouldn't go well with type inference.

38
00:02:29,170 --> 00:02:34,390
So, this is a small price to pay to have this
very important and very convenient feature

39
00:02:34,390 --> 00:02:37,470
of type inference in the OCaml system.

40
00:02:37,470 --> 00:02:43,670
In OCaml we have in fact explicit conversion
operations between almost all basic data types,

41
00:02:43,670 --> 00:02:47,980
and if they don't exist then it's very easy
to add them by yourselves.

42
00:02:47,980 --> 00:02:51,480
For instance, between floating point numbers
and integer numbers,

43
00:02:51,490 --> 00:02:54,530
you have <u>float_of_int</u> to convert from <u>int</u> to <u>float</u>

44
00:02:54,540 --> 00:02:58,140
and <u>int_of_float</u> to convert from <u>float</u> to <u>int</u>.

45
00:02:58,140 --> 00:03:02,360
Now, we have to tell you how to write down
a function application.

46
00:03:02,360 --> 00:03:07,640
This is very easy. You just write the name of the function followed by the argument.

47
00:03:07,640 --> 00:03:10,900
We will come back to functions
later during this week,

48
00:03:10,900 --> 00:03:16,520
just let me point out that parenthesis are a priori not part of the syntax of function application.

49
00:03:16,520 --> 00:03:20,140
So you just write usually the function name
followed by the argument.

50
00:03:20,150 --> 00:03:27,690
You have to use parenthesis only if it is necessary to indicate the structure of a more complicated expression.

51
00:03:27,690 --> 00:03:31,830
Our next data type are characters, written <u>char</u>.

52
00:03:31,830 --> 00:03:38,440
This type contains 256 values of type characters.

53
00:03:38,440 --> 00:03:42,840
The constants of which can be written either
as letters inside of quotes,

54
00:03:42,840 --> 00:03:49,540
or using various other notations like octal
numbers, decimal numbers, hex-numbers, and so on,

55
00:03:49,550 --> 00:03:52,430
which you can find all in the manual.

56
00:03:52,430 --> 00:03:57,650
We have conversion functions between integers
and characters in both directions.

57
00:03:57,650 --> 00:04:01,739
And in fact as you might see
from the names of these functions,

58
00:04:01,739 --> 00:04:05,339
these are coming in fact from a module called <u>Char</u>.

59
00:04:05,340 --> 00:04:09,340
This all we have to know for the moment
about using this module.

60
00:04:09,340 --> 00:04:14,520
In fact, we will learn much more about modules
in the last week of this MOOC.

61
00:04:17,560 --> 00:04:21,600
Here we have some simple expressions
working with characters.

62
00:04:21,600 --> 00:04:27,140
So, for instance, we can ask for
the integer code of the character <u>'A'</u>,

63
00:04:28,740 --> 00:04:30,540
which is 65.

64
00:04:30,540 --> 00:04:38,580
We might also use decimal code numbers to denote character constants, like in the next example.

65
00:04:38,580 --> 00:04:42,740
We have here a character constant
with the integer code 122.

66
00:04:42,740 --> 00:04:49,860
And when we ask for its conversion into integer we get of course precisely that value, namely 122.

67
00:04:49,860 --> 00:04:56,380
We might also convert in the other direction, so taking an integer code and convert it into a character.

68
00:04:56,380 --> 00:05:01,100
As you can see on the next example with <u>Char.chr</u>.

69
00:05:01,620 --> 00:05:06,040
And this is again our letter 'A' in capital.

70
00:05:06,040 --> 00:05:11,360
And, finally, the last example demonstrates
that in fact the two conversion functions,

71
00:05:11,360 --> 00:05:16,100
<u>Char.chr</u> and <u>Char.code</u>,
are in fact inverse to each other,

72
00:05:16,120 --> 00:05:21,400
so when we go in one way and then back again,
you obtain precisely the same value.

73
00:05:23,060 --> 00:05:27,820
Finally, we have the type of strings, as in
almost all programming languages.

74
00:05:27,820 --> 00:05:31,000
String constant are written between double quotes.

75
00:05:31,000 --> 00:05:37,120
You have the operator <u>^</u>, used as an infix
operator to denote string concatenation.

76
00:05:37,120 --> 00:05:42,860
And you have lots of usual functions, like
calculating the length of a string with <u>String.length</u>.

77
00:05:42,860 --> 00:05:49,440
You can convert a string to an integer,
provided that the string really means an integer.

78
00:05:49,440 --> 00:05:54,120
And in the same way you can convert a string
to a float, provided that you have written

79
00:05:54,120 --> 00:05:57,120
a string which really means a float.

80
00:05:57,120 --> 00:06:03,140
Some of the pitfalls. So let me repeat again:
the basic data types are disjoint.

81
00:06:03,140 --> 00:06:08,820
So you cannot rely on implicit conversion, as it is the case with some other programming languages.

82
00:06:08,820 --> 00:06:13,240
And you always have to use
explicit conversion functions.

83
00:06:13,240 --> 00:06:17,100
Strings, as many things in computer science
and as this MOOC,

84
00:06:17,100 --> 00:06:21,500
are always numbered starting from 0
and not starting from 1.

85
00:06:21,509 --> 00:06:27,409
A final point is: if you happen to look at
old documentation of the OCaml system,

86
00:06:27,409 --> 00:06:30,400
you may find a different module of strings,

87
00:06:30,400 --> 00:06:34,340
which used to be modifiable,
but this is no longer the case.

88
00:06:34,340 --> 00:06:38,580
Strings are just non-modifiable strings in OCaml.

89
00:06:41,880 --> 00:06:44,800
Now, some expressions about the strings.

90
00:06:44,800 --> 00:06:50,020
Here we have the concatenation of 2 strings,
<u>"abc"</u> and <u>"def"</u>,

91
00:06:50,020 --> 00:06:53,220
which gives us of course the string <u>"abcdef"</u>.

92
00:06:53,220 --> 00:06:59,760
Then we have some basic and important functions on strings, like calculating the length of a string,

93
00:06:59,760 --> 00:07:03,020
using the function <u>String.length</u>.

94
00:07:03,920 --> 00:07:07,040
Which is of course, as expected, <u>5</u>.

95
00:07:07,040 --> 00:07:10,500
We may try to convert a string into an integer.

96
00:07:10,500 --> 00:07:16,000
This is an evaluation which might fail if
you put as argument any arbitrary string.

97
00:07:16,009 --> 00:07:21,949
However, if this string that you put at argument
indeed indicates an integer, then this is

98
00:07:21,949 --> 00:07:24,600
the integer value which you obtain.

99
00:07:24,600 --> 00:07:30,140
However, you should not confuse the type string,
which might represent an integer

100
00:07:30,140 --> 00:07:32,300
with the integer value itself,

101
00:07:32,300 --> 00:07:34,620
which is of course of a very different type.

102
00:07:34,620 --> 00:07:40,280
So, here we obtain indeed an integer value
which is <u>12345</u>.

103
00:07:40,900 --> 00:07:45,840
We might also convert into the other direction,
so taking an integer value and convert it

104
00:07:45,840 --> 00:07:49,760
into a string gives us a string.

105
00:07:49,760 --> 00:07:55,300
And we might also try to obtain a character
from a string at a particular position,

106
00:07:55,300 --> 00:07:56,500
like in our last example.

107
00:07:56,500 --> 00:08:06,160
You take the string <u>"abcdef"</u> and ask for the
character at position 1, which is of course <u>'b'</u>.

108
00:08:06,160 --> 00:08:11,480
Since <u>'a'</u> would be at position number 0 and
you find at position 1 the character <u>'b'</u>.

109
00:08:13,480 --> 00:08:17,320
Again, you can find complete information
about the basic data types,

110
00:08:17,320 --> 00:08:20,080
seen in this sequence, in the OCaml manual.

111
00:08:20,080 --> 00:08:24,760
You have the description of floating point arithmetic in
the module <u>Pervasives</u>.

112
00:08:24,760 --> 00:08:30,440
And you have dedicated modules in
the standard library about characters and strings.


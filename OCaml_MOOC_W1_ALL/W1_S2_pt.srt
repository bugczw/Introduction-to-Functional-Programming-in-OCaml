1
00:00:00,000 --> 00:00:04,920
Olá! Nesta sequência vamos
continuar a nossa visita de OCaml,

2
00:00:04,920 --> 00:00:08,340
com as construções de algumas expressões base.

3
00:00:08,860 --> 00:00:12,720
O papel das expressões é de calcular valores.

4
00:00:12,720 --> 00:00:16,380
No OCaml temos um sistema muito rico de valores

5
00:00:16,380 --> 00:00:19,419
e de facto estes têm um papel muito importante no OCaml.

6
00:00:19,419 --> 00:00:26,619
Por esta razão, as expressões têm também um papel
central na definição da linguagem.

7
00:00:26,620 --> 00:00:31,900
Uma primeira construção, que é muito importante,
é a construção de uma expressão condicional,

8
00:00:31,900 --> 00:00:37,660
que se escreve sempre: <u>if</u> condição <u>then</u>
primeira expressão <u>else</u> segunda expressão.

9
00:00:37,660 --> 00:00:43,540
Aqui, é importante que note que esta construção
retorna sempre uma expressão,

10
00:00:43,540 --> 00:00:46,660
e não algo que se poderia designar de instrução.

11
00:00:46,660 --> 00:00:49,340
Uma expressão tem sempre um tipo,

12
00:00:49,350 --> 00:00:53,399
o que significa que a condição, ela própria
uma expressão, tem de ter o tipo booleano.

13
00:00:53,399 --> 00:00:58,420
E, além do mais, as duas expressões que estão
a seguir no <u>then</u> e no <u>else</u>,

14
00:00:58,420 --> 00:00:59,800
devem ser do mesmo tipo

15
00:00:59,800 --> 00:01:05,040
e o tipo destas duas expressões dá-vos o
tipo da condicional como um todo.

16
00:01:05,040 --> 00:01:11,450
Há na verdade um valor por omissão que é associado
no caso de não fornecer a parte do  <u>else</u>,

17
00:01:11,450 --> 00:01:18,370
mas por enquanto, por favor, não o utilize por enquanto,
não é o valor que espera.

18
00:01:20,260 --> 00:01:23,180
Aqui temos algumas expressões condicionais simples.

19
00:01:23,180 --> 00:01:25,560
O primeiro exemplo é um caso de utilização típica.

20
00:01:25,570 --> 00:01:30,970
Na parte da condição deveremos ter claro uma
expressão que deve ser de tipo booleano,

21
00:01:30,970 --> 00:01:32,180
o que é o caso aqui,

22
00:01:32,180 --> 00:01:36,390
na sequência temos duas expressões, na parte
<u>then</u> e na parte <u>else</u>, que devem

23
00:01:36,390 --> 00:01:38,890
ter ambas o mesmo tipo.

24
00:01:38,890 --> 00:01:42,090
No caso da condição, esta é avaliada
para <u>true</u>,

25
00:01:42,090 --> 00:01:49,750
logo o resultado desta avaliação é o resultado da parte <u>then</u>,
que é, claro, <u>13</u>.

26
00:01:50,560 --> 00:01:54,720
Algo importante a reter a propósito das
expressões condicionais é que

27
00:01:54,720 --> 00:01:59,280
as expressões que seguem o <u>then</u> e que seguem o <u>else</u>
devem ser do mesmo tipo.

28
00:01:59,280 --> 00:02:03,340
Senão como poderíamos obter um tipo coerente
para a expressão condicional como um todo ?

29
00:02:03,340 --> 00:02:06,750
Como podemos ver neste exemplo, não é o caso,

30
00:02:06,750 --> 00:02:11,790
e de facto o sistema OCaml diz-nos
que cometemos um erro de tipo.

31
00:02:13,540 --> 00:02:20,760
No entanto, é obviamente permitido  combinar as
expressões condicionais com outras construções

32
00:02:20,760 --> 00:02:26,960
que conhece e construir expressões aninhadas mais
complexas,

33
00:02:26,960 --> 00:02:29,640
como neste exemplo.

34
00:02:29,650 --> 00:02:34,560
Aqui, temos uma expressão condicional
que é combinada por uma conjunção

35
00:02:34,560 --> 00:02:36,920
com outra expressão booleana

36
00:02:36,920 --> 00:02:42,260
e é perfeitamente correcta e dá-nos
o valor booleano <u>true</u>.

37
00:02:42,260 --> 00:02:48,040
Finalmente, uma outra forma de aninhar, perfeitamente
possível nas expressões booleanas:

38
00:02:48,040 --> 00:02:50,980
aqui temos uma expressão aninhada como condição.

39
00:02:50,980 --> 00:02:58,420
E isto é, claro, correto e obtemos como
esperado o valor <u>true</u>.

40
00:03:00,000 --> 00:03:04,300
Podemos igualmente construir expressões
por aplicação de funções.

41
00:03:04,310 --> 00:03:07,950
Para saber como utilizar uma função na construção de uma expressão,

42
00:03:07,950 --> 00:03:11,350
tem antes de conhecer o tipo da função alvo.

43
00:03:11,350 --> 00:03:14,580
Em geral, a função pode receber vários argumentos.

44
00:03:14,580 --> 00:03:19,820
E neste caso, o tipo da função escreve-se como
uma sequência de todos os tipos dos argumentos

45
00:03:19,820 --> 00:03:22,020
e do tipo do resultado no fim.

46
00:03:22,020 --> 00:03:25,620
Todos estes elementos estão separados por setas.

47
00:03:25,620 --> 00:03:30,740
Para aplicar uma função com vários argumentos
escreve-se simplesmente o nome da função,

48
00:03:30,750 --> 00:03:36,950
seguido das várias expressões que calculam
os valores do argumentos.

49
00:03:37,320 --> 00:03:41,260
Por exemplo, poderíamos ter uma função como
<u>String.get</u>

50
00:03:41,260 --> 00:03:44,490
que espera uma string seguida de um inteiro

51
00:03:44,490 --> 00:03:46,290
e que retorna um caractere.

52
00:03:46,290 --> 00:03:53,550
E aplicaremos esta função  escrevendo simplesmente
<u>String.get</u>, seguido da string, e finalmente do inteiro.

53
00:03:53,550 --> 00:04:00,190
E isto resulta neste caso na letra <u>'c'</u>,
visto que os índices das string começam em 0.

54
00:04:00,200 --> 00:04:04,000
Como pode ver novamente, os parênteses
não são necessárias.

55
00:04:04,000 --> 00:04:08,060
Eles tornariam-se necessários caso tivesse
expressões mais complexas,

56
00:04:08,060 --> 00:04:10,600
nas quais é necessário indicar a estrutura.

57
00:04:13,200 --> 00:04:19,980
Os exemplos deste acetato mostram como aplicar
uma função que espera vários argumentos,

58
00:04:19,980 --> 00:04:26,280
como aqui, a função <u>String.get</u>, que espera
como argumentos uma string seguida de um inteiro,

59
00:04:26,280 --> 00:04:28,540
escrevendo simplesmente o nome da função

60
00:04:28,540 --> 00:04:32,099
seguido do primero argumento, e do segundo argumento,

61
00:04:32,099 --> 00:04:37,919
e obtemos sem surpresa o resultado esperado que
é <u>'c'</u>, o terceiro caractere desta string.

62
00:04:37,920 --> 00:04:42,340
Na verdade, podemos escrever na
posição do parâmetro efetivo

63
00:04:42,349 --> 00:04:47,209
qualquer expressão cujo valor calculado é do tipo esperado.

64
00:04:47,209 --> 00:04:52,860
Por exemplo, o segundo e o primeiro argumento
podem ser expressões mais complexas,

65
00:04:52,860 --> 00:04:57,499
que devem ser avaliadas antes de
passar os valores para a função.

66
00:04:57,499 --> 00:05:01,479
Poderíamos também ter algo mais complicado,
como a aplicação desta função,

67
00:05:01,479 --> 00:05:04,079
que nos dá, neste caso, o caractere <u>'l'</u>.

68
00:05:04,080 --> 00:05:10,440
Ou então, como no caso seguinte, temos
diferentes tipos de cálculos,

69
00:05:10,440 --> 00:05:14,159
onde convertemos antes um inteiro em string
no caso do primeiro argumento,

70
00:05:14,159 --> 00:05:17,579
e uma string para inteiro, para
obter o segundo argumento.

71
00:05:20,080 --> 00:05:26,500
As expressões podem ser aninhadas arbitrariamente e
tornarem-se rapidamente complexas e complicadas,

72
00:05:26,500 --> 00:05:32,860
poderá então utilizar as definições locais para dividir
uma grande expressão em pedaços menores,

73
00:05:32,860 --> 00:05:36,420
como verá na próxima sequência.

74
00:05:37,700 --> 00:05:42,979
É possível fornecer às funções argumentos em
quantidade à priori insuficiente.

75
00:05:42,979 --> 00:05:49,259
Se tentar fazê-lo, então obterá um resultado de
tipo diferente do que provavelmente estava à espera,

76
00:05:49,260 --> 00:05:51,940
como veremos na semana 4.

77
00:05:51,940 --> 00:05:56,360
Mais uma vez, os parênteses não fazem parte
da sintaxe da aplicação de função.

78
00:05:56,360 --> 00:06:04,460
Se tentar algo como <u>f (e1, e2)</u> para
a aplicação de uma função com dois argumentos,

79
00:06:04,460 --> 00:06:10,000
obterá um erro, e a explicação
ser-lhe-á dada na semana 2.

80
00:06:10,000 --> 00:06:14,140
Os operadores são simplesmente funções com
uma sintaxe particular

81
00:06:14,140 --> 00:06:19,260
que lhe permite escrever uma aplicação usando
a notação infixa.

82
00:06:19,270 --> 00:06:23,650
Os operadores, já que são funções,
têm também um tipo.

83
00:06:23,650 --> 00:06:32,720
Por exmeplo, <u>+</u> tem o tipo <u>int -> int -> int</u>
porque é a habitual soma inteira.

84
00:06:32,720 --> 00:06:38,680
Já vimos operadores com tipo polimórfico,
como os operadores de comparação

85
00:06:38,680 --> 00:06:42,580
visto que estes operadores esperam
valores de qualquer tipo.

86
00:06:42,589 --> 00:06:48,809
Neste caso, os tipos dos argumento estão
assinalados por uma variável dita de tipo.

87
00:06:48,809 --> 00:06:52,769
O nome das variáveis de tipo é prefixado
por uma plica.

88
00:06:54,080 --> 00:06:58,800
No caso onde essas são constituídas
de uma plica e de uma só letra,

89
00:06:58,800 --> 00:07:00,800
escrevemo-las no papel como uma
letra do alfabeto grego.

90
00:07:01,360 --> 00:07:06,860
Assim, no nosso exemplo, escrevemos
"alfa seta alfa para bool".

91
00:07:06,860 --> 00:07:09,480
As variáveis podes ser instanciadas,

92
00:07:09,490 --> 00:07:11,790
mas, como são variáveis de tipo,

93
00:07:11,790 --> 00:07:15,070
só podem ser instanciadas por tipos.

94
00:07:15,070 --> 00:07:19,500
E, como vemos no exemplo <u>'a ->' a -> bool</u>,

95
00:07:19,500 --> 00:07:25,560
isto significa que a variável deve de facto
ser sempre instanciada pelo mesmo tipo

96
00:07:25,560 --> 00:07:27,500
numa chamada particular.

97
00:07:30,040 --> 00:07:34,199
Ou seja, isto tudo para relembrar algumas coisas sobre
os operadores polimórficos,

98
00:07:34,199 --> 00:07:37,719
que já introduzimos na sequência anterior.

99
00:07:37,720 --> 00:07:44,660
Um operador de comparação polimórfica espera
sempre dois argumentos de mesmo tipo.

100
00:07:44,660 --> 00:07:50,860
Assim, se experimentamos aplicar dois valores
de tipo diferente, obtemos um erro de tipo.

101
00:07:50,860 --> 00:07:54,960
No entanto, se temos várias invocações
de um operador de comparação,

102
00:07:54,960 --> 00:08:00,520
então o tipo comum dos valores comparados
pode mudar a cada nova invocação.

103
00:08:00,520 --> 00:08:04,300
Como no exemplo seguinte onde, primeiro,
comparamos dois valores inteiros,

104
00:08:04,300 --> 00:08:06,900
e comparamos depois dois valores
de vírgula flutuante,

105
00:08:06,900 --> 00:08:09,839
e finalmente dois caracteres.

106
00:08:09,839 --> 00:08:15,199
Podemos, claro, comparar os resultados obtidos
e isto é perfeitamente válido.

107
00:08:15,200 --> 00:08:17,560
E obtemos o valor booleano <u>true</u>.

108
00:08:19,580 --> 00:08:22,000
Uma advertência, para concluir.

109
00:08:22,000 --> 00:08:28,040
O operador de comparação escreve-se sempre
com um só sinal de igualdade <u>=</u>.

110
00:08:28,040 --> 00:08:36,040
Na verdade, existe no OCaml um operador
que se escreve <u>==</u>, mas significa outra coisa,

111
00:08:36,040 --> 00:08:38,800
como poderá ver na semana 2.

112
00:08:38,800 --> 00:08:43,100
Como sempre, encontrará muita mais
informação no manual de OCaml.

113
00:08:43,100 --> 00:08:47,400
E, se quiser aprender mais sobre o conjunto
completo das construções para as expressões,

114
00:08:47,400 --> 00:08:53,120
poderá consultar o capítulo sobre as
expressões no manual de referência de OCaml.

1
00:00:00,000 --> 00:00:04,920
Hello!
In this sequence we will continue our tour of OCaml,

2
00:00:04,920 --> 00:00:08,340
with the construction of some basic expressions.

3
00:00:08,860 --> 00:00:12,720
The rule of expressions is to compute values.

4
00:00:12,720 --> 00:00:16,380
In OCaml we have a very rich system of values

5
00:00:16,380 --> 00:00:19,419
and in fact values play a very important role in OCaml.

6
00:00:19,419 --> 00:00:26,619
For this reason, expressions too play
a very central role in the definition of the language.

7
00:00:26,620 --> 00:00:31,900
A first construction, which is very important,
is the construction of the conditional expression,

8
00:00:31,900 --> 00:00:37,660
which is always written: <u>if</u> condition <u>then</u>
first expresion <u>else</u> second expression.

9
00:00:37,660 --> 00:00:43,540
Here it is important to note that this construction
always gives you an expression,

10
00:00:43,540 --> 00:00:46,660
and not something which
could be called an instruction.

11
00:00:46,660 --> 00:00:49,340
An expression always has to have a type,

12
00:00:49,350 --> 00:00:53,399
which means that, of course,
the condition has to be of boolean type.

13
00:00:53,399 --> 00:00:58,420
And, furthermore, the two expressions that
you have in the <u>then</u> and in the <u>else</u> part,

14
00:00:58,420 --> 00:00:59,800
have to be of the same type.

15
00:00:59,800 --> 00:01:05,040
And this type will give you the type of the
complete conditional expression.

16
00:01:05,040 --> 00:01:11,450
There is in fact a default value which is
used in case you don't write an <u>else</u> part,

17
00:01:11,450 --> 00:01:18,370
but please don't use this for the moment,
as this default is not what you might expect it to be.

18
00:01:20,260 --> 00:01:23,180
Here we have some simple conditional expressions.

19
00:01:23,180 --> 00:01:25,560
The first example would be a typical use case.

20
00:01:25,570 --> 00:01:30,970
We have of course always in the conditional part
an expression which must be of boolean type,

21
00:01:30,970 --> 00:01:32,180
which is the case here,

22
00:01:32,180 --> 00:01:36,390
and then we have two expressions, in the
<u>then</u> part and in the <u>else</u> part, which must

23
00:01:36,390 --> 00:01:38,890
both be of the same type.

24
00:01:38,890 --> 00:01:42,090
Like in this case, the condition of course
would be evaluated to <u>true</u>,

25
00:01:42,090 --> 00:01:49,750
which means that the result of this evaluation would be the result of the <u>then</u> part, which is of course <u>13</u>.

26
00:01:50,560 --> 00:01:54,720
An important thing to remember about
conditional expressions is that

27
00:01:54,720 --> 00:01:59,280
the types of the expressions in the <u>then</u> part
and in the <u>else</u> part must be the same.

28
00:01:59,280 --> 00:02:03,340
Otherwise how could we obtain a type for the
complete conditional expression?

29
00:02:03,340 --> 00:02:06,750
As we can see in this example,
this is not the case,

30
00:02:06,750 --> 00:02:11,790
and in fact the OCaml system tells us that
we have committed a type error.

31
00:02:13,540 --> 00:02:20,760
However, we are of course allowed to combine
conditional expressions with any other constructions

32
00:02:20,760 --> 00:02:26,960
that you might know about expressions and obtain
something nested and more complicated,

33
00:02:26,960 --> 00:02:29,640
like it is the case in this example.

34
00:02:29,650 --> 00:02:34,560
Here we have a conditional expression which is combined using conjunction

35
00:02:34,560 --> 00:02:36,920
with another boolean expression

36
00:02:36,920 --> 00:02:42,260
And this is of course perfectly OK and gives
us the boolean value <u>true</u>.

37
00:02:42,260 --> 00:02:48,040
Finally, another kind of nesting that is perfectly
allowed in boolean conditional expressions:

38
00:02:48,040 --> 00:02:50,980
here we have a nested expression as the condition.

39
00:02:50,980 --> 00:02:58,420
And this is of course OK and what we obtain in
this case is, as expected, the value <u>true</u>.

40
00:03:00,000 --> 00:03:04,300
We may also construct expressions
by function application.

41
00:03:04,310 --> 00:03:07,950
In order to know how to use a function in
constructing an expression,

42
00:03:07,950 --> 00:03:11,350
you have to known first the type of your function.

43
00:03:11,350 --> 00:03:14,580
In general, the function may
expect several arguments.

44
00:03:14,580 --> 00:03:19,820
And in this case the type is written as a
sequence of all the argument types

45
00:03:19,820 --> 00:03:22,020
and the result type at the end.

46
00:03:22,020 --> 00:03:25,620
All of these are separated by arrows.

47
00:03:25,620 --> 00:03:30,740
To apply a function with several arguments
we just write the name of the function,

48
00:03:30,750 --> 00:03:36,950
followed by the different expressions which
calculate the values of the arguments.

49
00:03:37,320 --> 00:03:41,260
For example, you might have a function like
<u>String.get</u>

50
00:03:41,260 --> 00:03:44,490
which expects first a string then an integer

51
00:03:44,490 --> 00:03:46,290
and which returns a character.

52
00:03:46,290 --> 00:03:53,550
And you would apply this function just by writing down <u>String.get</u>, then the string, and finally the integer.

53
00:03:53,550 --> 00:04:00,190
And this would give you in this case the letter <u>'c'</u>, since strings are indexed starting from 0.

54
00:04:00,200 --> 00:04:04,000
As you can see again,
parentheses are a priori not needed.

55
00:04:04,000 --> 00:04:08,060
They would only be needed in case you
have more complicated expressions,

56
00:04:08,060 --> 00:04:10,600
in which you have to indicate structure.

57
00:04:13,200 --> 00:04:19,980
The examples on this slide demonstrate how we can apply a function which expects several arguments,

58
00:04:19,980 --> 00:04:26,280
like in this case the function <u>String.get</u>, which expects first a string argument and then an integer argument,

59
00:04:26,280 --> 00:04:28,540
and you just write down the name of the function

60
00:04:28,540 --> 00:04:32,099
followed by the first argument,
and then the second argument,

61
00:04:32,099 --> 00:04:37,919
and we obtain of course the result as expected,
which is <u>'c'</u>, the third character in this string.

62
00:04:37,920 --> 00:04:42,340
In fact you are allowed to write
at the position of the actual argument

63
00:04:42,349 --> 00:04:47,209
any expression which computes
a value of the expected type.

64
00:04:47,209 --> 00:04:52,860
Like, for instance, the second and the first
argument might be more complex expressions,

65
00:04:52,860 --> 00:04:57,499
which are to be evaluated before
passing the values to the function.

66
00:04:57,499 --> 00:05:01,479
So we could also have something more complicated,
like this function application,

67
00:05:01,479 --> 00:05:04,079
which gives us in this case the character <u>'l'</u>.

68
00:05:04,080 --> 00:05:10,440
Or, as in the following case,
we have different kind of computation,

69
00:05:10,440 --> 00:05:14,159
where we first convert an integer to a string
for the first argument,

70
00:05:14,159 --> 00:05:17,579
and a string to an integer
to obtain the second argument.

71
00:05:20,080 --> 00:05:26,500
Expressions in fact may be arbitrarily nested
and may become very complex and complicated,

72
00:05:26,500 --> 00:05:32,860
you may in this case use local definitions
in order to cut a large expression into smaller pieces,

73
00:05:32,860 --> 00:05:36,420
as you will see in fact next sequence.

74
00:05:37,700 --> 00:05:42,979
Functions may a priori be
undersupplied with arguments.

75
00:05:42,979 --> 00:05:49,259
If you try to do this then you get in general
a result of a different type than you might expect,

76
00:05:49,260 --> 00:05:51,940
as you will see in week 4.

77
00:05:51,940 --> 00:05:56,360
Again, parentheses are a priori
not part of function application.

78
00:05:56,360 --> 00:06:04,460
If you try to write something like <u>f (e1, e2)</u> for a function application of a function with two arguments,

79
00:06:04,460 --> 00:06:10,000
you will get an error, and
the explication for this will be given in week 2.

80
00:06:10,000 --> 00:06:14,140
Operators are just functions
with a particular syntax

81
00:06:14,140 --> 00:06:19,260
which allows you to write down
an application in an infix notation.

82
00:06:19,270 --> 00:06:23,650
Operators, since they are functions,
always also have a type.

83
00:06:23,650 --> 00:06:32,720
Like for instance <u>+</u> has type <u>int -> int -> int</u>
since it's the usual integer addition.

84
00:06:32,720 --> 00:06:38,680
We have already seen some operators which have in fact polymorphic type, like the comparison operators

85
00:06:38,680 --> 00:06:42,580
since these operators may expect values of any type.

86
00:06:42,589 --> 00:06:48,809
In this case the type of the arguments is
indicated with a so called type variable.

87
00:06:48,809 --> 00:06:52,769
Type variables are indicated by an initial quote.

88
00:06:54,080 --> 00:06:58,800
In case these variables consist of
only one letter and a quote,

89
00:06:58,800 --> 00:07:00,800
they are in fact spelled like greek letters.

90
00:07:01,360 --> 00:07:06,860
So in our example we would have
"alpha arrow alpha gives bool".

91
00:07:06,860 --> 00:07:09,480
Type variables can be instantiated,

92
00:07:09,490 --> 00:07:11,790
but, since they are type variables, of course,

93
00:07:11,790 --> 00:07:15,070
they can be instantiated only by types.

94
00:07:15,070 --> 00:07:19,500
And, as you can see on the example <u>'a -> 'a -> bool</u>,

95
00:07:19,500 --> 00:07:25,560
this means that the variable of course has
always to be instantiated by the same type

96
00:07:25,560 --> 00:07:27,500
in one application.

97
00:07:30,040 --> 00:07:34,199
So, this is just to recall some things about
polymorphic operators,

98
00:07:34,199 --> 00:07:37,719
which we have already explained
in a previous sequence.

99
00:07:37,720 --> 00:07:44,660
A polymorphic comparison operator expects
always two arguments of the same type.

100
00:07:44,660 --> 00:07:50,860
So, if you try to apply it to two values of
different types, we obtain a typing error.

101
00:07:50,860 --> 00:07:54,960
However, if you have several invocations of
a comparison operator,

102
00:07:54,960 --> 00:08:00,520
then you are of course allowed to compare
values of different types in the different invocations.

103
00:08:00,520 --> 00:08:04,300
Like in the following example where, first,
we compare two integer values,

104
00:08:04,300 --> 00:08:06,900
then we compare two floating point values,

105
00:08:06,900 --> 00:08:09,839
and finally we compare two character values.

106
00:08:09,839 --> 00:08:15,199
We can of course combine the results obtained
by boolean operations and this is perfectly OK.

107
00:08:15,200 --> 00:08:17,560
And we obtain the boolean value <u>true</u>.

108
00:08:19,580 --> 00:08:22,000
One final word of warning.

109
00:08:22,000 --> 00:08:28,040
The comparison operator is for us always written
with the single equality sign <u>=</u>.

110
00:08:28,040 --> 00:08:36,040
In fact there exists in OCaml an operator
written <u>==</u>, however it means something else,

111
00:08:36,040 --> 00:08:38,800
as you will see in week 2.

112
00:08:38,800 --> 00:08:43,100
As always, you can find much more information
in the OCaml manual.

113
00:08:43,100 --> 00:08:47,400
And if you want to learn about complete set
of constructions for expressions,

114
00:08:47,400 --> 00:08:53,120
you can find it in the reference manual of
the Ocaml language, in the chapter on expressions.


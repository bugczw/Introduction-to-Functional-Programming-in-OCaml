1
00:00:00,190 --> 00:00:00,810
Olá de novo!

2
00:00:00,810 --> 00:00:05,040
Continuemos a nossa exposição dos
tipos de dados básicos em OCaml.

3
00:00:05,040 --> 00:00:10,269
E continuaremos com o tipos dos
números com vírgula flutuante.

4
00:00:10,269 --> 00:00:15,739
Os valores dos números flutuantes são sempre
escritos por forma a indicar

5
00:00:15,740 --> 00:00:20,280
explicitamente que está a lidar com um
número flutuante e não um número inteiro,

6
00:00:20,290 --> 00:00:22,870
o que significa que deve utilizar
ou um ponto decimal,

7
00:00:22,870 --> 00:00:26,280
ou um expoente, ou até mesmo os dois.

8
00:00:26,280 --> 00:00:27,980
Da mesma forma,

9
00:00:27,990 --> 00:00:33,239
os operadores sobre os números flutuantes devem
ser escritos com um ponto no fim,

10
00:00:33,239 --> 00:00:36,979
da forma que se tem <u>+.</u>, <u>-.</u>,
e assim sucessivamente.

11
00:00:36,980 --> 00:00:41,100
Tem, claro, todas as funções habituais
sobre os números flutuantes,

12
00:00:41,109 --> 00:00:45,829
como a raíz quadrada, o seno, o coseno,
o valor absoluto, e assim sucessivamente...

13
00:00:46,200 --> 00:00:49,440
Cuidado, é muito importante, por isso repito,

14
00:00:49,449 --> 00:00:53,869
deve indicar na escrita de uma constante

15
00:00:53,869 --> 00:00:58,169
o facto que usa números flutuantes
e não inteiros.

16
00:00:58,169 --> 00:01:01,689
Assim, deve sempre utilizar um ponto
ou um expoente

17
00:01:01,689 --> 00:01:04,300
nas constantes de tipo flutuante,

18
00:01:04,300 --> 00:01:09,540
e deve sempre utilizar um ponto nos
operadores que trabalham com flutuantes.

19
00:01:12,600 --> 00:01:15,800
Agora, olhemos para algumas expressões
flutuantes simples.

20
00:01:15,800 --> 00:01:20,260
Aqui, temos uma soma entre
duas constantes com vírgula flutuante.

21
00:01:20,260 --> 00:01:25,240
A seguir, temos uma multiplicação entre
duas constantes com vírgula flutuante.

22
00:01:25,240 --> 00:01:32,060
Mais uma vez, os dois últimos exemplos mostram
que não pode mesmo misturar inteiros

23
00:01:32,070 --> 00:01:35,390
com flutuantes sem conversão explícita.

24
00:01:35,390 --> 00:01:38,470
Por exemplo, tentar calcular a soma inteira

25
00:01:38,470 --> 00:01:43,510
entre um inteiro e um número flutuante
devolve-nos um erro de tipo.

26
00:01:43,510 --> 00:01:49,910
E, precisamente da mesma forma, tentar multiplicar
um flutuante por um inteiro

27
00:01:49,910 --> 00:01:51,890
devolve-nos um erro de tipo.

28
00:01:53,780 --> 00:01:56,900
Isto é na verdade um princípio importantíssimo em OCaml.

29
00:01:56,900 --> 00:01:59,740
Todos os tipos base são disjuntos,

30
00:01:59,740 --> 00:02:04,200
o que significa que nenhum valor pertence
simultaneamente a um tipo

31
00:02:04,200 --> 00:02:07,300
e a outro tipo diferente.

32
00:02:07,760 --> 00:02:10,300
Contrariamente a outras linguagens de programação

33
00:02:10,300 --> 00:02:14,520
não há conversão implícita entre tipos de dados,

34
00:02:14,520 --> 00:02:17,320
o que significa que se pretende uma conversão

35
00:02:17,320 --> 00:02:21,660
então terá de juntar explicitamente
o operador de conversão.

36
00:02:21,660 --> 00:02:24,000
Há uma muito boa razão para tal,

37
00:02:24,010 --> 00:02:29,170
que é que a conversão implícita entre tipos
conviveria muito mal com a inferência de tipos.

38
00:02:29,170 --> 00:02:34,390
Assim, é um pequeno preço por pagar para ter esta
funcionalidade muito importante e muito prática

39
00:02:34,390 --> 00:02:37,470
no sistema OCaml: a inferência de tipo.

40
00:02:37,470 --> 00:02:43,670
Em OCaml temos operadores de conversão
explícita entre quase todos os tipos base,

41
00:02:43,670 --> 00:02:47,980
e se não existem, é muito fácil juntá-los
por nós próprios.

42
00:02:47,980 --> 00:02:51,480
Por exemplo, entre os números flutuantes
e os números inteiros,

43
00:02:51,490 --> 00:02:54,530
temos <u>float_of_int</u> para converter um <u>int</u> em <u>float</u>

44
00:02:54,540 --> 00:02:58,140
e <u>int_of_float</u> para converter um <u>float</u> em <u>int</u>.

45
00:02:58,140 --> 00:03:02,360
Para os utilizar, é preciso dizer-vos como
escrever uma aplicação de função.

46
00:03:02,360 --> 00:03:07,640
É muito fácil. Basta escrever o nome
da função seguido do argumento.

47
00:03:07,640 --> 00:03:10,900
Voltaremos a falar de funções
mais adiante esta semana,

48
00:03:10,900 --> 00:03:16,520
deixe-me apontar que os parênteses não constam
da sintaxe da aplicação de função.

49
00:03:16,520 --> 00:03:20,140
Assim, escrevemos somente o nome da função
seguido do argumento.

50
00:03:20,150 --> 00:03:27,690
Utilizamos os parênteses para agrupar,
ou estruturar uma expressão mais complexa.

51
00:03:27,690 --> 00:03:31,830
O tipo de dados que se segue é o dos carateres,
escreve-se <u>char</u>.

52
00:03:31,830 --> 00:03:38,440
Este tipo contém 256 valores de tipo carater.

53
00:03:38,440 --> 00:03:42,840
As constantes podem ser escritas
como uma letra entre plicas,

54
00:03:42,840 --> 00:03:49,540
ou então utilizando outras notações como números
em notação octal, decimal ou hexadecimal, etc.

55
00:03:49,550 --> 00:03:52,430
que poderá ver detalhadas no manual.

56
00:03:52,430 --> 00:03:57,650
Temos funções de conversão entre inteiros e
caracteres nos dois sentidos.

57
00:03:57,650 --> 00:04:01,739
E como poderá ver pelos nomes das funções,

58
00:04:01,739 --> 00:04:05,339
estas vêm de um módulo chamado <u>Char</u>.

59
00:04:05,340 --> 00:04:09,340
E é isto que por enquanto basta saber
sobre a utilização deste módulo.

60
00:04:09,340 --> 00:04:14,520
De facto, saberemos muito mais sobre módulos no decorrer
da última semana deste MOOC.

61
00:04:17,560 --> 00:04:21,600
Aqui temos algumas expressões simples com carateres.

62
00:04:21,600 --> 00:04:27,140
Assim, por exemplo, podemos pedir o
código inteiro do caratere <u>'A'</u>,

63
00:04:28,740 --> 00:04:30,540
que é 65.

64
00:04:30,540 --> 00:04:38,580
Podemos também utilizar os números decimais para
designar os carateres constantes. Eis um exemplo.

65
00:04:38,580 --> 00:04:42,740
Temos aqui uma constante de tipo caratere
cujo código inteiro é 122.

66
00:04:42,740 --> 00:04:49,860
E quando o convertemos para inteiro, obtemos
precisamente este valor, ou seja 122.

67
00:04:49,860 --> 00:04:56,380
Podemos também proceder no outro sentido,
isto é, converter um código inteiro num caratere.

68
00:04:56,380 --> 00:05:01,100
Como pode vê-lo no exemplo seguinte com <u>Char.chr</u>.

69
00:05:01,620 --> 00:05:06,040
E temos de novo a letra 'A' maiúscula.

70
00:05:06,040 --> 00:05:11,360
E, finalmente, o último exemplo mostra
que, de facto, as duas funções de conversão,

71
00:05:11,360 --> 00:05:16,100
<u>Char.chr</u> e <u>Char.code</u>,
são inversa uma da outra,

72
00:05:16,120 --> 00:05:21,400
por forma que indo num sentido e depois para o outro,
reencontramos exactamente o mesmo valor.

73
00:05:23,060 --> 00:05:27,820
Finalmente, temos o tipo das cadeias de carateres, como em
praticamente todas as linguagens de programação.

74
00:05:27,820 --> 00:05:31,000
As cadeias de carateres (strings) são escritas entre aspas.

75
00:05:31,000 --> 00:05:37,120
Temos o operador <u>^</u>, utilizado como operador infixo
para representar a concatenação das strings.

76
00:05:37,120 --> 00:05:42,860
E temos as inúmeras funções habituais, como
<u>String.length</u> para calcular o comprimento de uma string.

77
00:05:42,860 --> 00:05:49,440
Podemos converter uma string para inteiro, desde que
esta string representa efetivamente um inteiro.

78
00:05:49,440 --> 00:05:54,120
E da mesma forma, podemos converter uma string para
flutuante, na condição de ter escrito

79
00:05:54,120 --> 00:05:57,120
uma string que possa efectivamente representar um flutuante.

80
00:05:57,120 --> 00:06:03,140
Algumas armadilhas. Perdoem-me a insistência:
os tipos de dados básicos são disjuntos.

81
00:06:03,140 --> 00:06:08,820
Logo, não pode confiar na conversão implícita
como noutras linguagens.

82
00:06:08,820 --> 00:06:13,240
E poderá sempre utilizar funções de conversão explícita.

83
00:06:13,240 --> 00:06:17,100
As strings, como muito outros conceitos em informática
e neste MOOC,

84
00:06:17,100 --> 00:06:21,500
são sempre numeradas a partir de 0 e
não a partir de 1.

85
00:06:21,509 --> 00:06:27,409
Um último ponto: se por acaso ler
documentação antiga do sistema OCaml,

86
00:06:27,409 --> 00:06:30,400
poderá encontrar um módulo diferente para as strings,

87
00:06:30,400 --> 00:06:34,340
numa altura em que essas eram alteráveis,
já não é mais o caso.

88
00:06:34,340 --> 00:06:38,580
Em OCaml as strings são constantes,
logo imutáveis.

89
00:06:41,880 --> 00:06:44,800
Agora, certas expressões sobre strings.

90
00:06:44,800 --> 00:06:50,020
Aqui, concatenamos 2 strings,
<u>"abc"</u> e <u>"def"</u>,

91
00:06:50,020 --> 00:06:53,220
o que nos devolve naturalmente a string <u>"abcdef"</u>.

92
00:06:53,220 --> 00:06:59,760
Na sequência, temos funções base
importantes sobre strings, como o comprimento,

93
00:06:59,760 --> 00:07:03,020
que se calcula com a função <u>String.length</u>.

94
00:07:03,920 --> 00:07:07,040
Aqui obtemos <u>5</u> como esperado.

95
00:07:07,040 --> 00:07:10,500
Podemos tentar converter uma string para inteiro.

96
00:07:10,500 --> 00:07:16,000
Esta avaliação pode falhar se o argumento
é uma string qualquer.

97
00:07:16,009 --> 00:07:21,949
No entanto, se a string em argumento representa
realmente um inteiro, então aqui está

98
00:07:21,949 --> 00:07:24,600
o valor inteiro que obtém.

99
00:07:24,600 --> 00:07:30,140
No entanto, não deve confundir o tipo string,
que pode representar um inteiro

100
00:07:30,140 --> 00:07:32,300
com o próprio valor inteiro,

101
00:07:32,300 --> 00:07:34,620
que evidentemente pertence a um tipo bem diferente.

102
00:07:34,620 --> 00:07:40,280
Por isso, aqui, obtemos de facto um valor inteiro
que é <u>12345</u>.

103
00:07:40,900 --> 00:07:45,840
Podemos igualmente ir noutra direção,
considerar um valor inteiro e convertê-lo

104
00:07:45,840 --> 00:07:49,760
para dar uma string.

105
00:07:49,760 --> 00:07:55,300
E podemos também tentar obter o caratere que está
numa dada posição na string,

106
00:07:55,300 --> 00:07:56,500
como no nosso último exemplo.

107
00:07:56,500 --> 00:08:06,160
Consideremos a string <u>"abcdef"</u> da qual queremos o caratere
que está na posição 1. Este é, claro, <u>'b'</u>.

108
00:08:06,160 --> 00:08:11,480
Já que <u>'a'</u> está na posição 0 e
que encontramos o caratere <u>'b'</u> na posição 1.

109
00:08:13,480 --> 00:08:17,320
Mais uma vez, poderá encontrar informação completa
sobre os tipos de dados básicos,

110
00:08:17,320 --> 00:08:20,080
encontrados nesta aula, no manual de OCaml.

111
00:08:20,080 --> 00:08:24,760
Encontrará a descrição da aritmética flutuante
no módulo <u>Pervasives</u>.

112
00:08:24,760 --> 00:08:30,440
E na biblioteca standard encontrará módulos
dedicados aos carateres e strings.

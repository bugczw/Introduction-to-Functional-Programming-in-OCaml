1
00:00:00,210 --> 00:00:00,869
Olá de novo.

2
00:00:00,869 --> 00:00:05,270
Neste vídeo vamos olhar para
definições em OCaml.

3
00:00:05,270 --> 00:00:09,370
As definições são usadas para
atribuir nomes a valores,

4
00:00:09,370 --> 00:00:12,710
e em OCaml as definições funcionam de duas maneiras:

5
00:00:12,710 --> 00:00:15,420
definições globais e definições locais.

6
00:00:15,420 --> 00:00:18,390
Vamos começar com definições globais.

7
00:00:18,390 --> 00:00:24,200
Definições globais são definições que ficam
efectivas a partir do momento em que as escrevemos

8
00:00:24,220 --> 00:00:31,900
até ao fim da sessão ou até ao fim do programa,
no caso de um programa compilado.

9
00:00:31,970 --> 00:00:37,640
A sintaxe é bastante simples, escrevemos <u>let</u>,
seguido de um nome, seguido de <u>=</u>,

10
00:00:37,640 --> 00:00:43,879
seguido da expressão que cálcula o valor que irá ser
atribuído ao nome escolhido.

11
00:00:43,879 --> 00:00:50,100
Não há necessidade de separar a definição de um
identificador,

12
00:00:50,170 --> 00:00:57,100
como também não é preciso declarar o tipo do
identificador, uma vez que o tipo irá ser inferido pelo sistema.

13
00:00:57,199 --> 00:01:02,839
Uma característica muito importante da
programação funcional é que

14
00:01:02,839 --> 00:01:07,579
quando atribuímos um valor a um identificador, este já não pode ser alterado.

15
00:01:07,579 --> 00:01:10,909
Isto também é verdade na presença de características imperativas,

16
00:01:10,909 --> 00:01:13,500
que iremos ver na semana 5.

17
00:01:13,500 --> 00:01:15,600
Isto pode parecer uma surpresa, por agora,

18
00:01:15,600 --> 00:01:21,200
mas na semana 5 vamos ver que é isto que acontece.

19
00:01:21,200 --> 00:01:24,750
Como é obvio, quando atribuímos um valor a um nome,

20
00:01:24,750 --> 00:01:29,380
podemos usar esse nome em expressões num ponto mais
à frente no programa.

21
00:01:29,380 --> 00:01:34,520
Isto é o porquê de termos definições.

22
00:01:37,549 --> 00:01:43,500
Temos aqui alguns exemplos simples de definições
com identificadores globais.

23
00:01:43,500 --> 00:01:46,960
Temos aqui alguns exemplos de definições globais
do identificador com o nome <u>x</u>,

24
00:01:46,960 --> 00:01:50,640
a que lhe é atribuído o valor <u>5</u>.

25
00:01:50,649 --> 00:01:53,810
Obviamente, assim que definimos o identificador <u>x</u>,

26
00:01:53,810 --> 00:01:57,030
podemos usá-lo para calcular outros valores

27
00:01:57,030 --> 00:02:01,430
como neste exemplo onde definimos
o identificador global <u>y</u>

28
00:02:01,430 --> 00:02:04,200
que irá ter como valor o resultado de <u>2 * x</u>,

29
00:02:04,200 --> 00:02:06,799
que é, obviamente, o valor <u>10</u>.

30
00:02:06,799 --> 00:02:12,800
É perfeitamente possível definir uma nova
definição global que tenha o mesmo nome

31
00:02:12,800 --> 00:02:15,700
uma vez que já o usámos anteriormente.

32
00:02:15,700 --> 00:02:20,100
O que acontece aqui é que, ao definirmos um novo
identificador

33
00:02:20,120 --> 00:02:23,870
que tem o mesmo nome que outro identificador,

34
00:02:23,870 --> 00:02:26,860
esse identificador irá ficar oculto,

35
00:02:26,860 --> 00:02:29,280
e ficará escondido.

36
00:02:29,280 --> 00:02:31,280
Por enquanto, vão ter que acreditar em mim e pensar que

37
00:02:31,280 --> 00:02:33,190
a definição que foi sobreposta ainda existe,

38
00:02:33,190 --> 00:02:35,470
e pode ser acedida através de outros mecanismos.

39
00:02:35,470 --> 00:02:40,400
No próximo video iremos mostrar um exemplo
para que é isso mesmo que acontece.

40
00:02:40,780 --> 00:02:42,420
Vamos então passar estas definições para o "toplevel",

41
00:02:42,420 --> 00:02:47,400
e obtemos como resultado que
<u>x</u> tem agora atribuído o valor <u>42</u>.

42
00:02:47,400 --> 00:02:52,560
Temos ainda que o <u>y</u> contém o
valor <u>10</u>, como anteriormente.

43
00:02:52,560 --> 00:02:55,800
Mas quando perguntamos pelo valor
que está contido em <u>x</u>,

44
00:02:55,800 --> 00:02:59,040
vamos ter como resultado, a última atribuição
que lhe foi feita,

45
00:02:59,040 --> 00:03:01,400
e o <u>x</u> que temos aqui na linha 9

46
00:03:01,400 --> 00:03:06,450
vai referir à última definição
de um identificador com o nome <u>x</u>,

47
00:03:06,450 --> 00:03:10,920
que tem como valor o número 42.

48
00:03:13,400 --> 00:03:18,700
Podemos também ter definiçoes locais, que funcionam
quase da mesma maneira,

49
00:03:18,700 --> 00:03:25,290
excepto  no seu âmbito, o que significa que a região
do programa em que esta definição está activa,

50
00:03:25,290 --> 00:03:28,870
é limitada pela sintaxe.

51
00:03:28,870 --> 00:03:36,000
Para usarmos uma definição local, escrevemos:
<u>let</u>, 'nome', <u>=</u>, a expressão a ser atribuída,

52
00:03:36,000 --> 00:03:38,180
<u>in</u>, expressão "2".

53
00:03:38,180 --> 00:03:42,800
E a expressão "2", aqui, irá ser
o âmbito que limita a região

54
00:03:42,800 --> 00:03:45,120
onde a definição é efectiva.

55
00:03:45,120 --> 00:03:49,750
Podemos, na verdade, escrever num programa
várias definições,

56
00:03:49,750 --> 00:03:53,730
locais e globais, que usem o mesmo nome.

57
00:03:53,730 --> 00:03:56,750
Se este for o caso, então a definição que seja "mais" local,

58
00:03:56,750 --> 00:03:58,290
a mais "interior",

59
00:03:58,290 --> 00:04:03,050
tem sempre mais prioridade sobre as mais globais,
ou mais "exteriores"

60
00:04:05,200 --> 00:04:08,550
Temos aqui algumas definições locais.

61
00:04:08,550 --> 00:04:12,000
Na primeira linha,
temos uma definição local do identificador <u>x</u>,

62
00:04:12,000 --> 00:04:14,900
a que lhe vai ser atribuído o valor <u>9</u>.

63
00:04:14,900 --> 00:04:19,959
Este identificador irá ser visível na expressão
que está a seguir ao <u>in</u>.

64
00:04:19,959 --> 00:04:24,389
O que significa que o reusltado que calculamos
irá ser <u>18</u>.

65
00:04:24,389 --> 00:04:27,600
Porém, com uma definição local

66
00:04:27,600 --> 00:04:33,710
a definição já não é vísivel assim que saímos do
âmbito da definição.

67
00:04:33,710 --> 00:04:38,020
o que significa que na próxima linha,
onde pedimos pelo valor de <u>x</u>,

68
00:04:38,020 --> 00:04:43,590
a definição local de <u>x</u> já não existe
e obtemos assim uma mensagem de erro.

69
00:04:43,590 --> 00:04:49,889
Só se tivermos uma definição global de um identificador
como <u>x</u> para o valor <u>17</u>,

70
00:04:49,889 --> 00:04:55,560
é que o podemos usar nas frases seguintes
que passamos então para o "toplevel".

71
00:04:55,560 --> 00:04:59,840
Assim que passamos a definição global de <u>x</u>,

72
00:04:59,840 --> 00:05:01,749
podemos pedir o valor de <u>x</u>.

73
00:05:01,749 --> 00:05:05,789
e obtemos, como podem esperar,
o valor <u>17</u>.

74
00:05:05,789 --> 00:05:10,600
E podemos usar o valor de <u>x</u>
numa outra definição, por exemplo, numa definição local

75
00:05:10,600 --> 00:05:14,169
que usa apenas o valor de <u>x</u>.

76
00:05:14,169 --> 00:05:17,300
Como neste caso,
em que temos uma definição local de <u>y</u>,

77
00:05:17,300 --> 00:05:20,030
que lhe irá ser atribuído <u>x + 1</u>,
que é o valor <u>18</u>,

78
00:05:20,030 --> 00:05:26,199
em <u>y / 3</u>, podemos esperar que o resultado
seja o valor <u>6</u>.

79
00:05:26,199 --> 00:05:28,999
Que é realmente o caso.

80
00:05:28,999 --> 00:05:34,590
O próximo exemplo mostra-nos novamente o que já vimos
anteriormente: a ocultação de definições.

81
00:05:34,590 --> 00:05:41,219
Uma definição mais recente, ou uma definição mais "interior"
ou mais local irá ocultar uma definição mais global,

82
00:05:41,219 --> 00:05:43,969
como podemos ver neste exemplo.

83
00:05:43,969 --> 00:05:48,180
Temos aqui três definições locais.

84
00:05:48,180 --> 00:05:50,000
Primeiro definimos <u>x</u> com o valor <u>4</u>.

85
00:05:50,000 --> 00:05:55,700
Definimos depois <u>y</u> que se irá referir a
<u>x</u> que acabámos de definir.

86
00:05:55,700 --> 00:05:59,400
E finalmente, definimos um novo identificador <u>x</u>

87
00:05:59,400 --> 00:06:04,069
que se refere a <u>y</u> que acabámos também de definir.

88
00:06:04,069 --> 00:06:06,259
Agora a questão é:
o que obtemos ao fim?

89
00:06:06,259 --> 00:06:09,620
Na verdade, e seguindo o princípio que acabámos
de falar,

90
00:06:09,620 --> 00:06:15,159
a definição mais local tem prioridade
sobre as definições mais globais,

91
00:06:15,159 --> 00:06:18,169
o que quer dizer que <u>x</u>,
que temos aqui na última linha,

92
00:06:18,169 --> 00:06:24,430
irá referir para a última definição que
passámos ao "toplevel"

93
00:06:24,430 --> 00:06:30,029
E realmente, o resultado que obtemos é
<u>10</u>. O que quer dizer que <u>2 * 5</u>.

94
00:06:30,029 --> 00:06:34,300
E isto, obviamente,
é o que estávamos à espera.

95
00:06:34,300 --> 00:06:35,800
O último exemplo,

96
00:06:35,800 --> 00:06:39,900
é semelhante ao que vimos anteriormente,
com expressões condicionais.

97
00:06:39,900 --> 00:06:42,580
No OCaml temos vários princípios,

98
00:06:42,580 --> 00:06:45,000
que permitem combinar expressões

99
00:06:45,000 --> 00:06:48,689
e construir expressões mais complexas
a partir de expressões simples.

100
00:06:48,689 --> 00:06:52,969
De forma a podermos inseri-las de uma forma
arbitrária, como é o caso deste exemplo,

101
00:06:52,969 --> 00:06:58,719
em que temos uma definição local,
em que no seu âmbito temos uma

102
00:06:58,719 --> 00:07:01,749
expressão, que é ela própria uma definição local.

103
00:07:01,749 --> 00:07:04,120
E isto é perfeitamente aceitável.

104
00:07:04,120 --> 00:07:10,600
Vamos então passar isto ao sistema e obtemos
um valor inteiro que é <u>22</u>.

105
00:07:12,889 --> 00:07:18,659
Neste esquema tentámos ilustrar o princípio
de prioridades de definições locais

106
00:07:18,659 --> 00:07:20,759
sobre definições mais globais.

107
00:07:20,759 --> 00:07:24,960
Temos aqui três atribuições para
três identificadores diferentes

108
00:07:24,960 --> 00:07:28,259
que têm todos o  mesmo nome <u>x</u>.

109
00:07:28,259 --> 00:07:32,789
Como podem ver neste esquema,
é sempre a definição mais local que ganha,

110
00:07:32,789 --> 00:07:40,860
e que tem prioridade sobre as definições
mais globais com o mesmo nome.

111
00:07:40,860 --> 00:07:46,100
Em alguns casos é necessário definir várias
coisas ao mesmo tempo.

112
00:07:46,129 --> 00:07:53,089
Se escrevermos uma definição, como por exemplo,
<u>let x = e</u>, o que acontece é o seguinte:

113
00:07:53,089 --> 00:07:58,689
primeiro temos que a expressão <u>e</u> é avaliada
no âmbito que temos antes de <u>let</u>;

114
00:07:58,689 --> 00:08:02,059
Ficamos assim com uma nova definição
e um novo âmbito

115
00:08:02,059 --> 00:08:07,889
que irá ser usado na sequência do programa.

116
00:08:07,889 --> 00:08:10,200
Isto pode causar problemas,

117
00:08:10,200 --> 00:08:14,719
nos casos em que temos que definir
duas coisas ao mesmo tempo,

118
00:08:14,719 --> 00:08:19,529
e neste caso,
vamos precisar de definições simultâneas

119
00:08:19,529 --> 00:08:21,929
Definições simultâneas permitem-nos

120
00:08:21,929 --> 00:08:26,720
avaliar duas expressões, <u>e1</u> e <u>e2</u>,
no âmbito antigo,

121
00:08:26,729 --> 00:08:33,229
e dar, ao mesmo tempo,
nomes a <u>x1</u> e <u>x2</u> a estes dois valores.

122
00:08:33,229 --> 00:08:39,430
O que significa que se escrevermos a expressão
<u>let x1 = e1;; x2 = e2</u>

123
00:08:39,430 --> 00:08:46,920
isto é exactamente o mesmo que mudar a ordem
e escrever <u>let x2 = e2;; x1 = e1</u>,

124
00:08:46,920 --> 00:08:51,910
uma vez que ambas as expressões
vão ser avaliadas no âmbito antigo.

125
00:08:51,910 --> 00:08:55,830
Isto funciona com definições globais
e locais.

126
00:08:58,900 --> 00:09:03,520
Neste exemplo vou demonstrar a diferença
entre definições sequênciais

127
00:09:03,520 --> 00:09:05,730
e definições simultâneas.

128
00:09:05,730 --> 00:09:10,280
Primeiro, vamos atribuir o valor <u>1</u> a <u>x</u>.

129
00:09:10,280 --> 00:09:13,300
Temos aqui também uma definição sequencial

130
00:09:13,300 --> 00:09:17,750
que é uma definição local.

131
00:09:17,750 --> 00:09:21,080
O que é importante aqui é que definimos
um novo identificador,

132
00:09:21,080 --> 00:09:23,510
<u>x</u> que tem o valor 2,

133
00:09:23,510 --> 00:09:26,640
e na próxima linha, o <u>x</u> que
vemos na expressão

134
00:09:26,640 --> 00:09:30,380
nesta linha é, na verdade, o mais recente,

135
00:09:30,380 --> 00:09:33,980
o que significa que o valor de <u>x</u>
é <u>2</u>.

136
00:09:33,980 --> 00:09:40,320
Portanto, quando passamos estas definições
para o compilador, obtemos o valor <u>6</u>.

137
00:09:40,320 --> 00:09:45,170
Isto já não acontece quando usamos
definições simultâneas.

138
00:09:45,170 --> 00:09:47,920
Nas definições simultâneas, as duas expressões,

139
00:09:47,920 --> 00:09:53,710
que temos a seguir ao sinal de igualdade
são avaliadas no âmbito anterior,

140
00:09:53,710 --> 00:09:58,770
ou seja, o âmbito onde o <u>x</u>
tem o valor <u>1</u>.

141
00:09:58,770 --> 00:10:04,680
E neste caso, o <u>y</u> irá ter o valor
de <u>1+1</u> .

142
00:10:04,680 --> 00:10:09,000
Obtemos assim como resultado o valor inteiro <u>4</u>.

1
00:00:00,110 --> 00:00:00,690
Welcome back.

2
00:00:00,690 --> 00:00:05,800
We will see a glimpse of the history and
motivations behind functional programming.

3
00:00:05,830 --> 00:00:12,929
Programming is a "computing" activity.

4
00:00:12,929 --> 00:00:17,160
Computing is the study of the algorithms and processes

5
00:00:17,160 --> 00:00:19,860
that are used to describe and transform information.

6
00:00:19,860 --> 00:00:27,850
The basic question in Computing is
"how to efficiently automate a process".

7
00:00:27,850 --> 00:00:34,460
This is what you find written in the report
on "Computing as a Discipline" by the ACM.

8
00:00:34,460 --> 00:00:37,430
The basic components of computing are:

9
00:00:37,430 --> 00:00:42,850
a program that describes
the intended transformation of information;

10
00:00:42,850 --> 00:00:46,160
and a machine that executes the program.

11
00:00:46,160 --> 00:00:53,850
It might look surprising, but there are actually
very different "machines" available

12
00:00:53,850 --> 00:00:57,600
and very different ways of writing a program.

13
00:00:57,600 --> 00:01:00,680
Some of these machines,
and ways of programming them,

14
00:01:00,680 --> 00:01:06,500
were invented well before
the first modern computer was ever built.

15
00:01:06,500 --> 00:01:09,310
Here we will recall a bit of this history, because

16
00:01:09,310 --> 00:01:13,580
as you will see, this gives us
the foundations of Functional Programming.

17
00:01:13,580 --> 00:01:24,380
If one has to pick a date, then 1928 might
be a good one for the "beginning" of programming.

18
00:01:24,380 --> 00:01:30,970
Because it's the year when a famous mathematician,
David Hilbert, posed the "decision problem".

19
00:01:30,970 --> 00:01:38,090
He asked the research community to find a way
--- to devise a process ---

20
00:01:38,090 --> 00:01:44,740
to decide whether a logic statement is valid, or not,

21
00:01:44,740 --> 00:01:48,320
using a finite number of operations.

22
00:01:48,320 --> 00:01:50,580
Well, that was a quite general statement...

23
00:01:50,580 --> 00:01:57,200
And to find an answer it was necessary
to define exactly what is an "operation",

24
00:01:57,200 --> 00:01:59,220
and what is a "process of computation".

25
00:01:59,220 --> 00:02:02,000
Many people worked on this problem.

26
00:02:02,000 --> 00:02:09,800
The famous Alan Turing, in 1936 ,
came back with an answer to Hilbert's question.

27
00:02:09,810 --> 00:02:15,860
To do this, he invented the Turing machine,
which is very well known today.

28
00:02:15,860 --> 00:02:19,000
It is basically a finite state automaton.

29
00:02:19,000 --> 00:02:24,000
It is able to read and write on a potentially infinite tape,

30
00:02:24,000 --> 00:02:29,430
and move to the left or right on the tape.

31
00:02:29,430 --> 00:02:31,250
That was a theoretical foundation of modern computers,

32
00:02:31,250 --> 00:02:32,940
and imperative programming.

33
00:02:32,940 --> 00:02:37,670
The tape is a kind of abstraction
of an adressable read/write memory,

34
00:02:37,670 --> 00:02:41,550
able to store not only data, but also a program.

35
00:02:41,550 --> 00:02:48,720
The automaton is an abstraction
of the modern microprocessor.

36
00:02:48,720 --> 00:02:58,099
On these machines, the programs one writes
behave in an imperative way.

37
00:02:58,099 --> 00:03:04,019
Indeed, imperative programs
read, write and make decisions

38
00:03:04,019 --> 00:03:09,800
based on what is present in memory cells (the tape).

39
00:03:09,800 --> 00:03:11,980
These cells hold the contents of "variables"

40
00:03:11,980 --> 00:03:16,000
that you know well if you have used
imperative programming languages.

41
00:03:16,000 --> 00:03:23,000
Variables are like the <u>c</u>, <u>n</u>, and <u>res</u>, that you
see in this little excerpt from a Java program.

42
00:03:23,000 --> 00:03:26,050
They are just names for memory cells.

43
00:03:26,050 --> 00:03:30,209
In this program,
that computes the factorial function,

44
00:03:30,209 --> 00:03:35,560
we initialise variables
---putting values into memory cells---

45
00:03:35,560 --> 00:03:39,769
then read values from memory cells,
perform operations on them,

46
00:03:39,769 --> 00:03:44,000
put the results back in memory cells
and then return the result.

47
00:03:44,000 --> 00:03:48,000
It's all just manipulation of memory cells.

48
00:03:48,000 --> 00:03:54,000
At almost the same time, Alonzo Church

49
00:03:54,000 --> 00:03:57,660
---which, by the way, was Alan Turing's Ph.D. advisor---

50
00:03:57,660 --> 00:04:02,640
answered Hilbert's question
by a completely different means.

51
00:04:02,650 --> 00:04:06,400
He invented the "lambda-calculus":

52
00:04:06,400 --> 00:04:10,180
a formalism that is really all in these two lines here.

53
00:04:10,180 --> 00:04:15,800
This system has just a few symbols,

54
00:04:15,800 --> 00:04:18,760
allowing to write functions, without names

55
00:04:18,769 --> 00:04:22,000
This is read "lambda x dot M".

56
00:04:22,000 --> 00:04:24,360
It is a function (without a name),

57
00:04:24,369 --> 00:04:28,000
having as formal parameter <u>x</u> and body <u>M</u>.

58
00:04:28,000 --> 00:04:29,559
---This is also called an "abstraction"---

59
00:04:29,559 --> 00:04:32,200
Then, you have what is called an "application".

60
00:04:32,200 --> 00:04:34,349
By putting <u>M</u> next to <u>N</u>, we mean:

61
00:04:34,349 --> 00:04:46,080
"I will call the function <u>M</u>,
giving it <u>N</u> as parameter."

62
00:04:46,080 --> 00:04:48,430
This is really the theoretical foundation
of Functional Programming.

63
00:04:48,430 --> 00:04:52,539
Writing programs using only
abstractions and applications.

64
00:04:52,539 --> 00:04:56,110
---that is defining functions,
and applying them to values---

65
00:04:56,110 --> 00:05:03,099
The only rule used in this system to "compute"
is this one, known as the "beta" rule.

66
00:05:03,099 --> 00:05:06,759
It says: "given a function
with formal parameter <u>x</u> and body <u>M</u>"

67
00:05:06,759 --> 00:05:12,000
"to which one passes <u>N</u>
as actual parameter to evaluate it"

68
00:05:12,000 --> 00:05:14,749
"we just evaluate the body <u>M</u>" ...

69
00:05:14,749 --> 00:05:24,189
... "after replacing all occurences of
the formal parameter <u>x</u> by the actual parameter <u>N</u>."

70
00:05:24,189 --> 00:05:26,250
There is nothing else!

71
00:05:26,259 --> 00:05:32,289
In functional programming, today,
we really program like this!

72
00:05:32,289 --> 00:05:36,400
We define function.
---possibly recursive ones---

73
00:05:36,400 --> 00:05:40,040
Apply them to values, and compose functions,

74
00:05:40,050 --> 00:05:42,610
to get the results we expect.

75
00:05:42,610 --> 00:05:47,699
For example, the same factorial algorithm
we have seen before

76
00:05:47,699 --> 00:05:52,349
can be written in OCaml like this.

77
00:05:52,349 --> 00:05:56,000
We define a function <u>fact</u> which is recursive.

78
00:05:56,000 --> 00:05:59,160
It takes a formal parameter <u>n</u>.

79
00:05:59,169 --> 00:06:00,800
It checks if it is equal to <u>0</u>.

80
00:06:00,800 --> 00:06:03,139
If it is, we return <u>1</u>.

81
00:06:03,139 --> 00:06:08,439
Otherwise, it multiplies <u>n</u> by
the result of computing the factorial of <u>n-1</u>.

82
00:06:08,439 --> 00:06:11,839
It's just a recursive definition.

83
00:06:11,839 --> 00:06:18,330
In a truly functional programming language
functions are first class citizens.

84
00:06:18,330 --> 00:06:21,000
This means that you can give a name to them;

85
00:06:21,000 --> 00:06:23,360
you can evaluate functions;

86
00:06:23,369 --> 00:06:25,800
you can pass functions as arguments to other functions;

87
00:06:25,800 --> 00:06:29,200
you can return a function as a result of a computation;

88
00:06:29,200 --> 00:06:35,520
and generally you can use
a function wherever an expression can fit.

89
00:06:35,520 --> 00:06:39,619
This is NOT the case for most of the programming
languages that you are used to.

90
00:06:39,619 --> 00:06:44,400
The benefits of having functions as first-class citizens

91
00:06:44,400 --> 00:06:47,200
will become evident by the end of the course.

92
00:06:47,210 --> 00:06:54,649
Up to now, we have seen the Turing machines
---the foundations of imperative programming---

93
00:06:54,649 --> 00:06:59,050
and lambda-calculus.
---the foundations of functional programming---

94
00:06:59,050 --> 00:07:11,199
Both of them born just to answer
a mathematic logical question.

95
00:07:11,199 --> 00:07:14,500
Abusing the original notation by Church,

96
00:07:14,500 --> 00:07:17,500
one could write the second line of the previous program

97
00:07:17,500 --> 00:07:23,000
---I mean this line here---

98
00:07:23,000 --> 00:07:29,759
using this lambda notation: "lambda dot n ..."

99
00:07:29,759 --> 00:07:34,400
That's the reason why, today,
you see all this excitement about "lambdas"

100
00:07:34,700 --> 00:07:38,599
being introduced in languages like Java and C++.

101
00:07:38,599 --> 00:07:46,449
Yes, what is happening is that they are just
introducing *real* functions in these languages.

102
00:07:46,449 --> 00:07:53,860
We have seen up to now, the Turing machines
---the foundations of imperative programming---

103
00:07:53,860 --> 00:07:59,980
and the lambda-calculus.
---the foundations of functional programming---

104
00:07:59,980 --> 00:08:08,620
Both born just to answer a question posed in 1928.

105
00:08:08,629 --> 00:08:17,999
Just after these two answers were introduced,
in 1936, people started asking how different

106
00:08:17,999 --> 00:08:23,899
they were from one another
in terms of power of computation.

107
00:08:23,900 --> 00:08:33,200
A nice result by Turing in 1937 proves that

108
00:08:33,200 --> 00:08:35,800
any function that is computable by a Turing-machine

109
00:08:35,800 --> 00:08:37,569
is also computable in the lambda-calculus,

110
00:08:37,569 --> 00:08:41,000
and viceversa.

111
00:08:41,000 --> 00:08:45,300
In principle, you can program anything
in any of the two styles.

112
00:08:45,300 --> 00:08:48,380
That was a central result.

113
00:08:48,389 --> 00:08:54,400
After that, they ended up with the so called
"Church-Turing" thesis,

114
00:08:54,400 --> 00:08:59,000
which basically says that any function
computable using any computing device

115
00:08:59,000 --> 00:09:04,720
is also computable using Turing machines,
or the lambda calculus.

116
00:09:04,720 --> 00:09:11,260
In simpler terms,
all general purpose programming languages, today,

117
00:09:11,260 --> 00:09:17,520
are equivalent in terms of computational power.

118
00:09:17,520 --> 00:09:20,000
I mean: any function programmable in one language,

119
00:09:20,000 --> 00:09:22,660
can also be programmed in another language.

120
00:09:22,670 --> 00:09:29,709
So that's not a criterion to use when you
want to choose a programming language.

121
00:09:29,709 --> 00:09:33,819
But programming languages
are really not born equal!

122
00:09:33,819 --> 00:09:39,690
Because despite the Turing-Church thesis,
they have very different expressiveness.

123
00:09:39,690 --> 00:09:44,890
Expressiveness is not the same as being able to compute a function:

124
00:09:45,790 --> 00:09:49,639
it is how concisely, how efficently, you can do it!

125
00:09:49,639 --> 00:09:52,990
And the quest for more expressive power
is a never ending one.

126
00:09:52,990 --> 00:09:57,120
It has led to different data representations,
different execution models,

127
00:09:57,120 --> 00:09:58,740
different mechanisms of abstraction.

128
00:09:58,740 --> 00:10:02,680
And the quest is still ongoing today.

129
00:10:02,689 --> 00:10:04,109
So when you choose a language,

130
00:10:04,109 --> 00:10:07,729
you are really looking for something more than
just what you can compute with it.

131
00:10:07,730 --> 00:10:11,019
You are looking for other desirable features,
like for example:

132
00:10:11,019 --> 00:10:12,959
How safe is the language:

133
00:10:12,960 --> 00:10:17,660
can it prevent you for making mistakes
before they will appear at execution time ?

134
00:10:17,660 --> 00:10:19,300
How efficient it is:

135
00:10:19,300 --> 00:10:24,840
can I program a function in such a way that
the result is computed more quickly

136
00:10:24,840 --> 00:10:26,840
than using another programming language ?

137
00:10:28,899 --> 00:10:30,750
How maintainable the code can be ?

138
00:10:30,750 --> 00:10:33,420
It is not just a matter of writing a piece of code.

139
00:10:33,420 --> 00:10:36,500
It is a matter of changing it, to read it back.

140
00:10:36,500 --> 00:10:40,860
So, depending on the problems you choose to solve,

141
00:10:40,860 --> 00:10:46,560
some programming languages may end up
being actually much better than others.

142
00:10:46,560 --> 00:10:50,189
I think you see where we are going here.

143
00:10:50,189 --> 00:10:53,749
We really believe that
in many cases functional programming

144
00:10:53,749 --> 00:10:56,500
is quite better than imperative programming.

145
00:10:56,500 --> 00:11:00,699
And this is not just the opinion
of the people giving this course today.

146
00:11:00,699 --> 00:11:06,899
If you go back to John Backus
---the creator of the FORTRAN programming language---

147
00:11:06,899 --> 00:11:10,410
---one of the first programming languages ever---

148
00:11:10,410 --> 00:11:13,570
He received the Turing award in 1978,

149
00:11:13,570 --> 00:11:16,710
and in his lecture, titled:

150
00:11:16,710 --> 00:11:21,010
"Can programming be liberated
from the Von Neumann style?"

151
00:11:21,010 --> 00:11:22,839
He said:

152
00:11:22,839 --> 00:11:27,029
"I want to find a way of writing code
in a functional way,"

153
00:11:27,029 --> 00:11:30,489
"because functional programming
deals with structured data,"

154
00:11:30,489 --> 00:11:35,109
"and it does not require
the complex machinery of procedure declaration."

155
00:11:35,110 --> 00:11:41,750
This is a quite interesting read,
that I really suggest to look at.

156
00:11:41,750 --> 00:11:45,590
So John Backus years ago said that

157
00:11:45,590 --> 00:11:47,720
functional programming was really interesting to look at.

158
00:11:47,720 --> 00:11:49,840
And today, if you look around you,

159
00:11:49,840 --> 00:11:53,060
you see that functional programming
is really on the rise.

160
00:11:53,060 --> 00:11:58,080
The interesting report at CMU
on Computer Science Education

161
00:11:58,080 --> 00:12:02,839
where they explain why they decided to use
functional programming in the first year courses.

162
00:12:02,839 --> 00:12:05,769
They see some clear emerging trends:

163
00:12:05,769 --> 00:12:11,229
one is that we need greater software reliability,

164
00:12:11,229 --> 00:12:13,369
---programs with less bugs---

165
00:12:13,369 --> 00:12:16,229
we need to prove programs correct;

166
00:12:16,229 --> 00:12:21,120
and pure functional programs are
easier to prove correct than imperative ones.

167
00:12:21,120 --> 00:12:25,940
On the other side, we also need to harness
the power of parallel computation:

168
00:12:25,940 --> 00:12:32,800
there is a large amout of computing systems, distributed machines, available,

169
00:12:32,800 --> 00:12:35,720
and you do not just write a program to
run it on a single machine,

170
00:12:35,720 --> 00:12:39,939
you want now to exploit the power
of the many machines available.

171
00:12:39,939 --> 00:12:45,379
So they say, if you carefully choose a set
of higher order functions,

172
00:12:45,380 --> 00:12:50,580
then it is easier to write programs
that can become parallel

173
00:12:50,580 --> 00:12:54,160
---and execute efficently on multiple machines---

174
00:12:54,160 --> 00:12:56,569
than if you do it in an imperative style.

175
00:12:56,569 --> 00:13:03,319
A very well known example of this is
the MapReduce combinator provided by Google.

176
00:13:03,319 --> 00:13:09,539
Map and Reduce... we will learn about them
a bit further away in the course...

177
00:13:10,460 --> 00:13:15,291
They are just higher order functions.

178
00:13:15,340 --> 00:13:20,420
Functions are really all around us.

179
00:13:20,420 --> 00:13:24,760
The expressivity and the power of functional
programming is now widely recognised:

180
00:13:24,760 --> 00:13:31,220
Java 1.8 and C++ 11 introduce lambda expressions.

181
00:13:31,230 --> 00:13:35,790
So, no matter what your
favourite programming language is,

182
00:13:35,790 --> 00:13:41,100
understanding functional programming principles
is really nowadays a basic skill.

183
00:13:41,100 --> 00:13:43,880
That's the reason we want to
bring you along this journey:

184
00:13:43,880 --> 00:13:47,940
you will learn these skills
using the OCaml programming language.


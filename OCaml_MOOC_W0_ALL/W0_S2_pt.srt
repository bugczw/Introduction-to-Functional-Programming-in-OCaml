1
00:00:00,110 --> 00:00:01,000
Olá de novo.

2
00:00:01,000 --> 00:00:02,580
Esta é a sequência 2 do curso.

3
00:00:02,580 --> 00:00:06,040
Vamos descobrir um pouco da
história da linguagem OCaml,

4
00:00:06,040 --> 00:00:07,320
e qual a sua origem.

5
00:00:07,330 --> 00:00:14,169
Tudo começa de facto pelo
trabalho pioneiro de Sir Robin Milner

6
00:00:14,169 --> 00:00:20,970
a partir do qual se desenvolveu
a família de linguagens chamadas ML, Meta-Language.

7
00:00:20,970 --> 00:00:27,030
Trata-se de uma família de linguagens de programação
funcionais com uma tipagem estática forte.

8
00:00:27,030 --> 00:00:32,950
O que podem ver aqui é uma cópia do
artigo de Robin Milner de 1978

9
00:00:32,950 --> 00:00:36,530
que introduz a teoria da programação
com tipagem polimórfica,

10
00:00:36,530 --> 00:00:39,460
que se encontrava no centro do sistema ML.

11
00:00:39,460 --> 00:00:45,680
Assim, quais são as características destas
linguagens da família ML?

12
00:00:45,680 --> 00:00:48,380
Ora, estas são sem dúvida linguagens funcionais,

13
00:00:48,380 --> 00:00:51,760
de tal forma que possuem funções de primeira classe.

14
00:00:51,770 --> 00:00:53,980
Mas tal não é a única característica que podem observar.

15
00:00:53,980 --> 00:00:56,739
Existem outros ingredientes chaves adicionais,

16
00:00:56,739 --> 00:01:01,450
um dos quais é a inferência de tipos,
este vértice deste triângulo.

17
00:01:01,450 --> 00:01:03,280
Temos os tipos polimorfos.

18
00:01:03,280 --> 00:01:04,940
--- aprenderemos mais sobre estes tipos ---

19
00:01:04,940 --> 00:01:09,840
--- tratam-se de tipos bastante flexíveis e poderosos ---

20
00:01:09,850 --> 00:01:12,410
Mas o ponto seguinte é ainda mais impressionante:

21
00:01:12,410 --> 00:01:15,700
os tipos estão sempre presentes,

22
00:01:15,700 --> 00:01:18,680
estão lá para verificar
a segurança do vosso programa,

23
00:01:18,680 --> 00:01:20,070
mas nunca temos necessidade de os escrever.

24
00:01:20,070 --> 00:01:23,860
Existe um fantástico algoritmo de inferência de tipos

25
00:01:23,860 --> 00:01:26,159
que os escrevem por nós.

26
00:01:26,159 --> 00:01:29,579
Finalmente, temos um terceiro elemento,

27
00:01:29,580 --> 00:01:34,540
que é tradicionalmente apelidado de
Tipos de Dados Algébricos (ADT),

28
00:01:34,549 --> 00:01:36,909
--- iremos descobri-los mais tarde durante o curso ---

29
00:01:36,909 --> 00:01:38,560
e a filtragem (patter-matching).

30
00:01:38,560 --> 00:01:43,049
Cada uma destas três características são de uma importância
inestimável durante a manipulação de dados,

31
00:01:43,049 --> 00:01:48,420
e a sua combinação é extremamente importante
para os programadores.

32
00:01:48,420 --> 00:01:52,130
Passemos agora à história do OCaml.

33
00:01:52,130 --> 00:01:54,890
Esta linguagem ML começou com Robin Milner.

34
00:01:54,890 --> 00:02:01,290
Em 1980, Gérard Huet no Inria em França,
enquanto dirigia o "projecto Formel",

35
00:02:01,290 --> 00:02:05,200
realizou um trabalho pioneiro
a propósito da mecanização da matemática.

36
00:02:05,200 --> 00:02:10,520
Para realizar este trabalho pioneiro, a sua equipa
utilizou a primeira versão da linguagem ML

37
00:02:10,520 --> 00:02:12,600
--- desenvolvida por Robin Milner ---

38
00:02:12,610 --> 00:02:14,230
e assim começaram a contribuir para esta.

39
00:02:14,230 --> 00:02:19,840
Por exemplo, a filtragem foi introduzida na
linguagem ML por pessoas que trabalhavam no Inria.

40
00:02:19,840 --> 00:02:26,900
Após isto, e tal como é habitual,
começaram o seu próprio branch,

41
00:02:26,900 --> 00:02:30,920
para a tornar mais adaptada à sua aplicação
particular: a mecanização da matemática.

42
00:02:30,920 --> 00:02:40,230
Então, em meados dos anos 80 várias pessoas neste
projecto começaram a trabalhar sobre o sistema.

43
00:02:40,230 --> 00:02:42,040
Eram grandes entusiastas deste tema.

44
00:02:42,040 --> 00:02:46,280
Por exemplo, em 1985, temos Guy Cousineau,
Pierre-Louis Curien e Michel Mauny

45
00:02:46,280 --> 00:02:50,560
que desenharam a "Máquina Abstracta Categórica".

46
00:02:50,569 --> 00:02:56,780
Trata-se de uma máquina abstracta capaz de executar
eficazmente programas altamente funcionais.

47
00:02:56,780 --> 00:03:02,080
De facto, "Máquina Abstracta Categórica"
escreve-se (em inglês) como o acrónimo CAM.

48
00:03:02,080 --> 00:03:05,700
Por outro lado tínhamos a ML,
a linguagem proveniente de Edimburgo.

49
00:03:05,700 --> 00:03:09,489
Assim, tudo junto faz CAML.

50
00:03:09,489 --> 00:03:14,150
A primeira implementação de CAML
data de 1987, por Ascander Suarez.

51
00:03:14,150 --> 00:03:19,700
Portanto CAML não se trata de uma besta
com duas bossas que atravessa o deserto,

52
00:03:19,700 --> 00:03:23,640
é apenas uma combinação de CAM e ML.

53
00:03:23,640 --> 00:03:29,610
Em seguida, de 1988 a 1992, houve imensa gente
que trabalhou sobre este sistema,

54
00:03:29,610 --> 00:03:32,849
em particular Michel Mauny e Pierre Weis
que o fizeram crescer.

55
00:03:32,849 --> 00:03:33,869
E finalmente,

56
00:03:33,869 --> 00:03:37,560
-- tenho óptimas recordações dessa época,
já que tinha acabado de chegar a França ---

57
00:03:37,560 --> 00:03:41,360
--- e descobri estas pessoas e
este trabalho incrível ---

58
00:03:41,360 --> 00:03:45,100
tínhamos um sistema impressionante,
bastante sofisticado, bastante poderoso,

59
00:03:45,100 --> 00:03:48,909
mas também muito complexo e bastante difícil de utilizar.

60
00:03:48,909 --> 00:03:51,750
Era preciso uma estação de trabalho
profissional para o executar.

61
00:03:51,750 --> 00:03:56,200
Desta forma, estava limitado a trabalhos
de investigação muito específicos.

62
00:03:56,200 --> 00:04:01,330
Depois, no início dos anos 1990,
assistiu-se a uma mudança nas regras do jogo.

63
00:04:01,330 --> 00:04:05,470
Era a idade do "Caml-Light".

64
00:04:05,470 --> 00:04:09,190
--- em contra-partida à antiga CAML
que era demasiado difícil de utilizar ---.

65
00:04:09,190 --> 00:04:11,870
Assim, em 1991, Xavier Leroy,

66
00:04:11,870 --> 00:04:14,990
--- que é actualmente reconhecido como
o principal criador da linguagem OCaml ---

67
00:04:14,990 --> 00:04:16,559
--- o criador da linguagem OCaml ---

68
00:04:16,559 --> 00:04:19,949
criou uma máquina abstracta, chamada ZINC,

69
00:04:19,949 --> 00:04:24,389
bastante mais eficaz que a CAM
para programas gerais.

70
00:04:24,389 --> 00:04:28,300
Damien Doligez escreveu um impressionante
gestor de memória.

71
00:04:28,300 --> 00:04:31,440
Estes resultados em combinação resultaram no "Caml-Light".

72
00:04:31,440 --> 00:04:34,740
De pequena dimensão, pouquíssimo código,

73
00:04:34,740 --> 00:04:37,240
cabia assim numa disquete

74
00:04:37,240 --> 00:04:40,080
--- um feito enorme nessa altura ---

75
00:04:40,080 --> 00:04:42,380
Portável: dispomos de um interpretador de 'bytecode',

76
00:04:42,380 --> 00:04:44,380
de tal forma que poderia funcionar
em qualquer tipo de máquina.

77
00:04:44,380 --> 00:04:48,999
E eficaz: este era capaz de
executar num computador básico daquela altura

78
00:04:48,999 --> 00:04:54,119
o que era bem menos do que temos nos nossos
bolsos hoje em dia com os smartphones.

79
00:04:54,119 --> 00:04:58,740
A máquina ZINC,
que estava no centro do sucesso do Caml-Light,

80
00:04:58,740 --> 00:05:01,659
é bastante diferente da
Máquina Abstracta Categórica original.

81
00:05:01,659 --> 00:05:06,749
No entanto o nome permaneceu e esta ainda se chama Caml.

82
00:05:06,749 --> 00:05:12,889
Tudo se começa a alterar
rapidamente em meados dos anos 90.

83
00:05:12,889 --> 00:05:17,709
Em 1995, "Caml Special Light" é publicado:
tínhamos assim um compilador nativo;

84
00:05:17,709 --> 00:05:21,259
um sistema de módulos rico e revolucionário.

85
00:05:21,259 --> 00:05:26,979
Depois, em 1996, temos uma outra característica
incrível, isto é, o Objective Caml.

86
00:05:26,979 --> 00:05:29,319
--- começam a perceber porque é chamado
OCaml nos dias de hoje ---

87
00:05:29,319 --> 00:05:38,400
Jérôme Vouillon e Didier Rémy adicionaram ao sistema
uma camada orientada a objectos elegante e eficaz,

88
00:05:38,460 --> 00:05:40,229
sempre com inferência de tipos.

89
00:05:40,229 --> 00:05:43,979
Este foi um resultado verdadeiramente importante,

90
00:05:43,979 --> 00:05:48,529
já que, antes deste período, toda a gente estava
convencida que seria impossível

91
00:05:48,529 --> 00:05:53,169
ter ao mesmo tempo objectos e
inferência de tipos polimorfos.

92
00:05:53,169 --> 00:05:57,839
De facto, tal era possível,
e foi realizador por pessoas formidáveis.
a
93
00:05:57,839 --> 00:06:00,719
Em 2000, surgem outras funcionalidades,

94
00:06:00,719 --> 00:06:04,689
Jacques Garrigue trabalha sobre um branch
denominado Objective Label,

95
00:06:04,689 --> 00:06:08,200
e este foi fundido no sistema de tal forma que
temos métodos polimórficos,

96
00:06:08,200 --> 00:06:11,199
parâmetros com nome, argumentos opcionais
e variantes discriminados polimórficos.

97
00:06:11,199 --> 00:06:13,800
Enfim, várias outras coisas,
sobre as coisas não falaremos hoje.

98
00:06:13,800 --> 00:06:20,559
Em 2011, há alguns anos, o nome foi
definitivamente alterado e padronizado como OCaml.

99
00:06:20,559 --> 00:06:23,349
Mas agora já sabem de onde vem.

100
00:06:23,349 --> 00:06:26,300
Assim, ao longo dos anos, OCaml tornou-se mais atractivo.

101
00:06:26,300 --> 00:06:31,480
E hoje, temos uma quantidade
incrível de utilizadores fantásticos

102
00:06:31,480 --> 00:06:36,139
que utilizam o vasto leque de funcionalidades
únicas que são fornecidas pelo sistema.

103
00:06:36,139 --> 00:06:40,729
Mas é bem melhor que não no que
vos vamos dizer.

104
00:06:40,729 --> 00:06:46,660
É bem melhor ouvir o que os utilizadores de OCaml,
eles próprios, têm a dizer sobre a linguagem

105
00:06:46,660 --> 00:06:48,439
e porque a escolheram.

106
00:06:48,439 --> 00:06:50,400
Veremos tudo isto na próxima sequência.
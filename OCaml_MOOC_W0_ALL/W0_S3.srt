1
00:00:00,120 --> 00:00:02,400
Welcome back. This is sequence 3 of the course.

2
00:00:02,400 --> 00:00:06,800
And, we will learn why we have chosen OCaml.

3
00:00:06,819 --> 00:00:10,200
By listening to the voices of users ---real users---

4
00:00:10,200 --> 00:00:15,200
and understanding why
they are so excited about this language.

5
00:00:15,250 --> 00:00:17,500
So who is using
the OCaml programming language ?

6
00:00:17,500 --> 00:00:20,550
Of course, it is used in teaching, in many universities,

7
00:00:20,550 --> 00:00:23,000
naturally in France where the language was born,

8
00:00:23,000 --> 00:00:25,990
in many universities, in Paris and all around.

9
00:00:25,990 --> 00:00:28,800
In Europe, various universities in different countries:

10
00:00:28,800 --> 00:00:33,600
in Italy, in Denmark, in Poland, in Austria.

11
00:00:33,600 --> 00:00:37,000
In the United States, in prestigious places
like Cornell University, Harvard,

12
00:00:37,000 --> 00:00:38,890
or Massachusetts, and Pennsylvania.

13
00:00:38,890 --> 00:00:41,030
And many other places.

14
00:00:41,030 --> 00:00:46,269
But here we are more interested in learning
why it is used in advanced research projects.

15
00:00:46,269 --> 00:00:47,400
The Coq proof assistant,

16
00:00:47,400 --> 00:00:49,900
which was awarded the Software System Award

17
00:00:49,999 --> 00:00:52,000
by the Association for Computer Machinery,

18
00:00:52,000 --> 00:00:54,000
just last year.

19
00:00:54,079 --> 00:00:56,800
The Astrée static analyser, which is used daily

20
00:00:56,800 --> 00:01:02,400
to verify the command and controls code
of the Airbus A380.

21
00:01:02,400 --> 00:01:06,800
The Frama-C platform,
which performs advanced analysis of C code.

22
00:01:06,800 --> 00:01:11,480
Ocsigen,
which is a revolutionary way of writing web applications.

23
00:01:11,480 --> 00:01:15,590
Alt-Ergo, a SAT modulo theory solver.

24
00:01:15,590 --> 00:01:19,800
Mirage OS,
which is an incredible achievement:

25
00:01:19,800 --> 00:01:25,200
developping a kernel as a library
that you can bind directly inside your application,

26
00:01:25,200 --> 00:01:27,600
to run the application on bare metal.

27
00:01:27,600 --> 00:01:32,270
Or Flow and Hack,
which are PHP or Javascript typecheckers.

28
00:01:32,270 --> 00:01:35,400
Yes, we are type-checking other languages,

29
00:01:35,400 --> 00:01:39,000
but the type-checker is written in OCaml,
it's fundamentally written in Caml.

30
00:01:39,000 --> 00:01:41,290
And this is a project coming from Facebook.

31
00:01:41,290 --> 00:01:42,600
And many others.

32
00:01:42,600 --> 00:01:50,000
And then you have industry, using OCaml for
advanced and sophisticated applications.

33
00:01:50,000 --> 00:01:53,000
Of course, you will find finance applications;

34
00:01:53,000 --> 00:01:56,500
Bloomberg, JaneStreet, LexiFi...

35
00:01:56,550 --> 00:01:58,400
But you have aerospace systems,

36
00:01:58,400 --> 00:02:01,500
like Dassault aviation using this.

37
00:02:01,590 --> 00:02:05,500
Then you have virtualisation of cloud: Citrix.

38
00:02:05,500 --> 00:02:10,200
Operating systems: Microsoft, Red Hat,
and various other.

39
00:02:10,200 --> 00:02:13,769
So it's very interesting to hear what all these people say.

40
00:02:13,769 --> 00:02:15,800
We asked many of these people

41
00:02:15,800 --> 00:02:18,300
to provide us a quote for this course

42
00:02:18,300 --> 00:02:19,900
to explain why they have chosen the language,

43
00:02:19,989 --> 00:02:22,200
and why this is important for them.

44
00:02:22,200 --> 00:02:25,000
So let's start with Astrée,

45
00:02:25,000 --> 00:02:30,700
which is used to ensure safety
of critical embedded code.

46
00:02:30,700 --> 00:02:33,700
So, Antoine Miné, which is a researcher,

47
00:02:33,700 --> 00:02:36,870
one of the main contributors to the Astrée system,

48
00:02:36,870 --> 00:02:39,800
told us that the language was essential

49
00:02:39,800 --> 00:02:43,370
to develop a system as sophisticated as this analyser,

50
00:02:43,370 --> 00:02:44,600
because it is type-safe,

51
00:02:44,600 --> 00:02:46,400
it's a functional language,

52
00:02:46,400 --> 00:02:47,500
it's robust,

53
00:02:47,500 --> 00:02:50,719
and has a high performance native code compiler,

54
00:02:50,719 --> 00:02:53,800
which is important when you have to verify
millions of lines of code,

55
00:02:53,800 --> 00:02:55,480
written by somebody else.

56
00:02:55,480 --> 00:02:57,359
Then you have mechanized proofs:

57
00:02:57,359 --> 00:02:58,600
we said the Coq proof assistant,

58
00:02:58,600 --> 00:03:01,500
which was awarded an important prize,

59
00:03:01,500 --> 00:03:04,739
is entirely written in OCaml too.

60
00:03:04,739 --> 00:03:06,800
And the Coq development team told us,

61
00:03:06,800 --> 00:03:10,600
if they really need to choose
one particular feature of the language

62
00:03:10,629 --> 00:03:13,489
that is essential for them,
that was pattern matching.

63
00:03:13,489 --> 00:03:18,849
Because otherwise implementing complex symbolic
computations would be really a nightmare.

64
00:03:18,849 --> 00:03:23,000
So TrustInSoft is a start-up that provides

65
00:03:23,000 --> 00:03:28,939
ground-breaking technology
for checking safety of software,

66
00:03:28,939 --> 00:03:32,829
which is used in security applications.

67
00:03:32,829 --> 00:03:37,760
For them, OCaml is fundamental because it
is efficient, and it is expressive.

68
00:03:37,760 --> 00:03:39,600
I mean they need efficiency,

69
00:03:39,600 --> 00:03:43,300
because they are working at the frontier
of what is technically possible today,

70
00:03:43,389 --> 00:03:46,000
they need expressivity because they are, again,

71
00:03:46,000 --> 00:03:50,000
developing sophisticated analysers
so they need to be concise,

72
00:03:50,000 --> 00:03:52,200
and they need static type-checking,

73
00:03:52,200 --> 00:03:57,629
because that way, you can avoid
an incredible amount of errors.

74
00:03:57,629 --> 00:04:02,019
Then you have also next generation web
applications like the Ocsigen framework.

75
00:04:02,019 --> 00:04:05,000
Vincent Balat, which is the creator of Ocsigen,

76
00:04:05,000 --> 00:04:09,419
considers that thanks to the OCaml type system,

77
00:04:09,419 --> 00:04:16,359
Ocsigen can do incredible things like checking
statically ---this means when you compile it---

78
00:04:16,359 --> 00:04:20,299
that a web application will
never generate invalid HTML pages,

79
00:04:20,300 --> 00:04:25,509
or that a form really has the fields which
are expected for the application to run.

80
00:04:25,509 --> 00:04:30,800
And, hmm, he also thinks that
a type-system is extremely powerful

81
00:04:30,800 --> 00:04:33,599
and useful for refactoring a large project.

82
00:04:33,599 --> 00:04:36,200
When you need to change a data definition,

83
00:04:36,200 --> 00:04:38,699
and adapt the program to the new data definition,

84
00:04:38,699 --> 00:04:42,270
the compiler really points out every piece
of code that needs to be modified.

85
00:04:42,270 --> 00:04:44,800
And this, for them, is life-saving.

86
00:04:44,800 --> 00:04:46,940
It saves days of testing and debugging.

87
00:04:48,550 --> 00:04:50,800
Then you have OCamlPro,
which is a professionnal company

88
00:04:50,800 --> 00:04:53,449
that specialises exactly in OCaml development.

89
00:04:53,449 --> 00:04:55,800
They are the best ones in town you can find,

90
00:04:55,800 --> 00:04:58,400
if you need to have some OCaml development be done.

91
00:04:58,400 --> 00:05:02,600
And again, they point out that what is fascinating,

92
00:05:02,600 --> 00:05:03,800
---compared to other languages---

93
00:05:03,800 --> 00:05:07,800
is that in OCaml, often,
you just define the type of your data,

94
00:05:07,800 --> 00:05:11,400
and then, naturally, gently,

95
00:05:11,400 --> 00:05:17,300
the compiler will drive you towards
the development of the right program, very fast.

96
00:05:17,300 --> 00:05:19,490
And, for them, this is really fascinating.

97
00:05:19,490 --> 00:05:23,600
We really hope you will get the taste of this power

98
00:05:23,600 --> 00:05:26,599
during the course of this MOOC.

99
00:05:26,599 --> 00:05:32,210
Cryptography. In cryptography, you have another
start-up which is called Cryptosense.

100
00:05:32,210 --> 00:05:38,550
They develop software which is used to assess
vulnerabilities in cryptographical systems.

101
00:05:38,550 --> 00:05:43,129
And for them, OCaml is a strategic advantage,

102
00:05:43,129 --> 00:05:45,600
because they can produce quickly,

103
00:05:45,600 --> 00:05:52,699
software that is, for them:
high quality, readable, and reusable.

104
00:05:52,699 --> 00:05:53,990
Finance.

105
00:05:53,990 --> 00:05:55,400
Here you find LexiFi,

106
00:05:55,400 --> 00:06:01,040
which is probably one of the earliest industrial adopters
of the OCaml language.

107
00:06:01,050 --> 00:06:05,200
They create innovative software
for managing complex financial products.

108
00:06:05,200 --> 00:06:09,900
And for them, beyond safety, readability,
expressivity and great performance,

109
00:06:09,900 --> 00:06:12,229
which are mentionned by many others,

110
00:06:12,229 --> 00:06:16,780
it is really important to
be able to have a portable system.

111
00:06:16,780 --> 00:06:21,439
They have clients using Unix, Windows, or
even just a Web browser,

112
00:06:21,439 --> 00:06:26,189
and they are able to
deploy their product across all the line.

113
00:06:26,189 --> 00:06:29,960
And I'm very happy to see there is a growing
interest and activity around OCaml today.

114
00:06:29,960 --> 00:06:31,970
Now in operating systems.

115
00:06:31,970 --> 00:06:33,500
Here you find Mirage project,

116
00:06:33,500 --> 00:06:37,000
which is a fantastic undertaking,

117
00:06:37,000 --> 00:06:42,200
to write a full exokernel or unikernel, entirely in OCaml.

118
00:06:42,200 --> 00:06:45,500
This means they are going to write every functionality,

119
00:06:45,500 --> 00:06:48,800
which is needed by an application to run on bare metal.

120
00:06:48,800 --> 00:06:52,420
A piece of an operating system,
that can be linked at directly inside the application,

121
00:06:52,430 --> 00:06:57,409
to be order of magnitudes faster than an application
just running through an operating system.

122
00:06:57,409 --> 00:07:02,039
They already have achieved this,
and this is done entirely in OCaml.

123
00:07:02,039 --> 00:07:05,200
For them, the combination of static type safety,

124
00:07:05,200 --> 00:07:07,979
and fast native code compilation,

125
00:07:07,979 --> 00:07:12,419
are fundamental for doing
this operating-system-level development.

126
00:07:12,419 --> 00:07:17,000
And finally, we can also mention
a very interesting paper.

127
00:07:17,000 --> 00:07:21,000
I do suggest that you go and get
this communications of the ACM

128
00:07:21,000 --> 00:07:24,659
In September 2011, Yaron Minsky, from Jane Street,

129
00:07:24,659 --> 00:07:26,500
wrote a paper which was called

130
00:07:26,500 --> 00:07:27,800
"OCaml for the masses",

131
00:07:27,800 --> 00:07:29,000
explaining why JaneStreet,

132
00:07:29,000 --> 00:07:31,700
which is a company that built financial trading tools,

133
00:07:31,700 --> 00:07:34,110
that handle ten billion dollars per day,

134
00:07:34,110 --> 00:07:37,000
two percent of all financial transactions
around the world,

135
00:07:37,000 --> 00:07:40,159
and run them through software
written entirely in OCaml.

136
00:07:40,159 --> 00:07:43,200
For them, it is really important to be able to write

137
00:07:43,200 --> 00:07:45,530
smaller, simpler, easier to understand systems,

138
00:07:45,530 --> 00:07:47,000
than using other languages.

139
00:07:47,000 --> 00:07:48,740
For a very simple reason, I mean,

140
00:07:48,740 --> 00:07:51,000
if you have a smaller piece of code,

141
00:07:51,000 --> 00:07:53,780
you have less chances to have bugs, that's clear.

142
00:07:53,780 --> 00:07:56,000
For them, a financial organization,

143
00:07:56,000 --> 00:07:58,900
where a mistake can cost you millions of dollars,

144
00:07:58,900 --> 00:08:01,530
this kind of features are fundamental.

145
00:08:01,530 --> 00:08:04,600
And also for them,
the type system is really fundamental to find bugs

146
00:08:04,600 --> 00:08:09,440
which are hard to get at through testing directly.

147
00:08:09,879 --> 00:08:12,300
And finally, virtualisation and cloud computing.

148
00:08:12,300 --> 00:08:15,599
You face Citrix, with the Xen hypervisor,

149
00:08:15,599 --> 00:08:19,969
I mean all the tools around the Xen hypervisor
are also written in OCaml.

150
00:08:19,969 --> 00:08:22,400
Richard Sharp, from Citrix told us that

151
00:08:22,400 --> 00:08:28,240
OCaml has really been key to bring productivity

152
00:08:28,240 --> 00:08:32,700
and efficiency improvements in their development.

153
00:08:32,700 --> 00:08:37,400
So to sum up, there is a wide variety of users
of the OCaml language,

154
00:08:37,400 --> 00:08:40,389
from teaching to research, to industry.

155
00:08:40,389 --> 00:08:42,000
And if you look at all these quotations,

156
00:08:42,000 --> 00:08:47,000
you will see that all of these people
unanimously value the safety,

157
00:08:47,000 --> 00:08:50,200
which is brought by strong static typing,

158
00:08:50,200 --> 00:08:52,110
and by pattern matching,

159
00:08:52,110 --> 00:08:54,510
the efficiency, of the high performance compiler.

160
00:08:54,510 --> 00:08:57,900
You just don't want a safe programming language
and then slow programs.

161
00:08:57,900 --> 00:08:59,320
You also want fast programs.

162
00:08:59,320 --> 00:09:03,060
And expressiveness,
which is really this magic combination,

163
00:09:03,060 --> 00:09:05,399
---this magic triangle we have seen
in the previous sequence---

164
00:09:05,399 --> 00:09:10,769
of a functional language, with type inference,
polymorphism, and abstract data types.

165
00:09:10,769 --> 00:09:15,800
We'll see a quick selection of examples to
get a taste of all this, later on.


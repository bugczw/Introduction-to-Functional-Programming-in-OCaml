1
00:00:00,110 --> 00:00:01,000
Re-bonjour.

2
00:00:01,000 --> 00:00:02,580
Ceci est la séquence 2 du cours.

3
00:00:02,580 --> 00:00:06,040
Nous allons découvrir un peu de
l'histoire du langage OCaml,

4
00:00:06,040 --> 00:00:07,320
et d'où il vient.

5
00:00:07,330 --> 00:00:14,169
Tout cela débute en réalité par
le travail pionnier, de Sir Robin Milner,

6
00:00:14,169 --> 00:00:20,970
à partir duquel s'est développée
la famille de langages appelés ML, Meta-Langage.

7
00:00:20,970 --> 00:00:27,030
C'est une famille de langages de programmation
fonctionnels avec typage statique fort.

8
00:00:27,030 --> 00:00:32,950
Ce que vous voyez ici est une copie du
papier de Robin Milner en 1978

9
00:00:32,950 --> 00:00:36,530
qui introduit la théorie de la programmation
avec typage polymorphe,

10
00:00:36,530 --> 00:00:39,460
qui était au cœur du système ML.

11
00:00:39,460 --> 00:00:45,680
Alors, quelles sont les caractéristiques de
ces langages de la famille ML?

12
00:00:45,680 --> 00:00:48,380
Eh bien, ce sont bien-sûr des langages fonctionnels,

13
00:00:48,380 --> 00:00:51,760
de sorte que vous avez des fonctions de première classe.

14
00:00:51,770 --> 00:00:53,980
Mais ce n'est pas la seule chose que vous trouvez.

15
00:00:53,980 --> 00:00:56,739
Il y a quelques ingrédients clés supplémentaires,

16
00:00:56,739 --> 00:01:01,450
l'un est l'inférence de type,
ce sommet du triangle qui est ici.

17
00:01:01,450 --> 00:01:03,280
Vous avez les types polymorphes.

18
00:01:03,280 --> 00:01:04,940
--- nous en apprendrons plus sur ces types ---

19
00:01:04,940 --> 00:01:09,840
--- ce sont des types très flexibles et puissants ---

20
00:01:09,850 --> 00:01:12,410
Mais le point suivant est encore plus impressionnant :

21
00:01:12,410 --> 00:01:15,700
les types sont présents tout le temps,

22
00:01:15,700 --> 00:01:18,680
ils sont là pour vérifier
la sécurité de votre programme,

23
00:01:18,680 --> 00:01:20,070
mais vous n'avez jamais besoin de les écrire.

24
00:01:20,070 --> 00:01:23,860
Il y a un fantastique algorithme d'inférence de types

25
00:01:23,860 --> 00:01:26,159
qui les écrit pour vous.

26
00:01:26,159 --> 00:01:29,579
Et enfin, vous avez un troisième élément,

27
00:01:29,580 --> 00:01:34,540
qui est traditionnellement appelé
Types de Données Algébrique (ADT),

28
00:01:34,549 --> 00:01:36,909
--- vous les découvrirez plus tard dans le cours ---

29
00:01:36,909 --> 00:01:38,560
et le filtrage (pattern-matching).

30
00:01:38,560 --> 00:01:43,049
Ces trois caractéristiques sont chacune d'un secours
inestimable pour les manipulations de données,

31
00:01:43,049 --> 00:01:48,420
et leur combinaison est extrêmement précieuse
pour les programmeurs.

32
00:01:48,420 --> 00:01:52,130
Passons maintenant à l'histoire de OCaml.

33
00:01:52,130 --> 00:01:54,890
Ce langage ML a commencé avec Robin Milner.

34
00:01:54,890 --> 00:02:01,290
Et en 1980, Gérard Huet à l'Inria en France,
alors qu'il menait le « projet Formel, »

35
00:02:01,290 --> 00:02:05,200
a fait un travail pionnier
sur la mécanisation des mathématiques.

36
00:02:05,200 --> 00:02:10,520
Pour faire ce travail pionnier, son équipe
a utilisé la première version du langage ML

37
00:02:10,520 --> 00:02:12,600
--- développé par Robin Milner ---

38
00:02:12,610 --> 00:02:14,230
et ils ont commencé à y contribuer.

39
00:02:14,230 --> 00:02:19,840
Par exemple, le filtrage a été introduit dans le
langage ML par des personnes travaillant à l'Inria.

40
00:02:19,840 --> 00:02:26,900
Et puis, comme cela arrive souvent,
ils ont commencé à faire leur propre branche,

41
00:02:26,900 --> 00:02:30,920
pour la rendre plus apte à leur application
particulière : la mécanisation des mathématiques.

42
00:02:30,920 --> 00:02:40,230
Et au milieu des années 80 beaucoup de gens dans ce
projet ont commencé à travailler sur le système.

43
00:02:40,230 --> 00:02:42,040
Ils étaient très enthousiastes sur ce sujet.

44
00:02:42,040 --> 00:02:46,280
Par exemple, en 1985, il y avait Guy Cousineau,
Pierre-Louis Curien et Michel Mauny

45
00:02:46,280 --> 00:02:50,560
qui ont conçu la « Machine Abstraite Catégorique ».

46
00:02:50,569 --> 00:02:56,780
C'est une machine abstraite pouvant exécuter très
efficacement des programmes hautement fonctionnels.

47
00:02:56,780 --> 00:03:02,080
En fait, « Machine Abstraite Catégorique »
s'écrit (en anglais) sous l'acronyme CAM.

48
00:03:02,080 --> 00:03:05,700
De l'autre côté vous avez ML,
la langage provenant d'Edimbourg.

49
00:03:05,700 --> 00:03:09,489
Et donc, mis ensemble cela fait CAML.

50
00:03:09,489 --> 00:03:14,150
La première implémentation de CAML
date de 1987, par Ascander Suarez.

51
00:03:14,150 --> 00:03:19,700
Donc en fait CAML n'est pas une bête
à deux bosses qui traverse un désert,

52
00:03:19,700 --> 00:03:23,640
c'est juste une combinaison de CAM et ML.

53
00:03:23,640 --> 00:03:29,610
Puis de 1988 à 1992 il y a eu beaucoup de gens
qui ont travaillé sur le système,

54
00:03:29,610 --> 00:03:32,849
en particulier Michel Mauny et Pierre Weis
qui l'ont fait grandir.

55
00:03:32,849 --> 00:03:33,869
Et à la fin,

56
00:03:33,869 --> 00:03:37,560
-- j'ai de tendres souvenirs de cette époque,
car je venais d'arriver en France ---

57
00:03:37,560 --> 00:03:41,360
--- et j'ai découvert ces gens et
ce travail incroyable ---

58
00:03:41,360 --> 00:03:45,100
vous aviez un impressionnant système,
très sophistiqué, très puissant,

59
00:03:45,100 --> 00:03:48,909
mais aussi très complexe et très lourd à utiliser.

60
00:03:48,909 --> 00:03:51,750
Vous aviez besoin d'une station de travail
professionnelle pour l'exécuter.

61
00:03:51,750 --> 00:03:56,200
Donc, c'était limité à un certain genre
de travaux de recherche très spécifiques.

62
00:03:56,200 --> 00:04:01,330
Ensuite, au début des années 1990,
il y a un changement dans les règles du jeu.

63
00:04:01,330 --> 00:04:05,470
C'était l'âge de « Caml-Light. »

64
00:04:05,470 --> 00:04:09,190
--- par opposition à l'ancien CAML
qui était très lourd à utiliser ---.

65
00:04:09,190 --> 00:04:11,870
Donc, en 1991, Xavier Leroy,

66
00:04:11,870 --> 00:04:14,990
--- qui est maintenant comme
le principal développeur du langage OCaml ---

67
00:04:14,990 --> 00:04:16,559
--- le créateur du langage OCaml ---

68
00:04:16,559 --> 00:04:19,949
a créé une autre machine abstraite, appelée ZINC,

69
00:04:19,949 --> 00:04:24,389
beaucoup plus efficace que la CAM
pour les programmes généraux,

70
00:04:24,389 --> 00:04:28,300
Damien Doligez a écrit un superbe
gestionnaire de mémoire.

71
00:04:28,300 --> 00:04:31,440
Les résultats mis ensemble ont donné « Caml-Light. »

72
00:04:31,440 --> 00:04:34,740
Faible encombrement, très peu de code,

73
00:04:34,740 --> 00:04:37,240
ainsi cela tenait sur une disquette

74
00:04:37,240 --> 00:04:40,080
--- une grande réussite à cette époque ---

75
00:04:40,080 --> 00:04:42,380
Portable: vous aviez un interprète de 'bytecode',

76
00:04:42,380 --> 00:04:44,380
de sorte qu'il pouvait fonctionner
sur tout type de machine.

77
00:04:44,380 --> 00:04:48,999
Et efficace: il était capable
de fonctionner sur un PC de base de l'époque

78
00:04:48,999 --> 00:04:54,119
ce qui était bien moins de ce que vous avez dans
votre poche avec vos téléphones portables aujourd'hui.

79
00:04:54,119 --> 00:04:58,740
La machine ZINC,
qui était au cœur de la réussite de Caml-Light,

80
00:04:58,740 --> 00:05:01,659
est très différente de
la Machine Abstraite Catégorique d'origine.

81
00:05:01,659 --> 00:05:06,749
Mais le nom est resté et cela s'appelle encore Caml.

82
00:05:06,749 --> 00:05:12,889
Les choses commencent à bouger
très rapidement au milieu des années 90.

83
00:05:12,889 --> 00:05:17,709
En 1995, « Caml Special Light » est publié :
vous aviez un compilateur natif ;

84
00:05:17,709 --> 00:05:21,259
un système de module riche et révolutionnaire.

85
00:05:21,259 --> 00:05:26,979
Puis, en 1996, vous avez une autre caractéristique
incroyable, je veux dire Objective Caml.

86
00:05:26,979 --> 00:05:29,319
--- vous commencez à voir pourquoi il est appelé
OCaml aujourd'hui ---

87
00:05:29,319 --> 00:05:38,400
Jérôme Vouillon et Didier Rémy ont ajouté au système
une couche orientée objet élégante et efficace,

88
00:05:38,460 --> 00:05:40,229
toujours avec de l'inférence de type.

89
00:05:40,229 --> 00:05:43,979
Ce fut un résultat vraiment important,

90
00:05:43,979 --> 00:05:48,529
parce que, avant cette période, tout le monde était
convaincu qu'il n'était pas possible

91
00:05:48,529 --> 00:05:53,169
d'avoir en même temps les objets et
l'inférence de types polymorphes.

92
00:05:53,169 --> 00:05:57,839
En fait, c'était possible,
cela a été fait par ces gens formidables.

93
00:05:57,839 --> 00:06:00,719
En 2000, d'autres fonctionnalités arrivent,

94
00:06:00,719 --> 00:06:04,689
Jacques Garrigue travaillait sur une branche.
appelée Objective Label,

95
00:06:04,689 --> 00:06:08,200
et cela a été fusionné dans le système de sorte que
vous avez des méthodes polymorphes,

96
00:06:08,200 --> 00:06:11,199
des paramètres nommés, des arguments optionnels
et des unions discriminées polymorphes.

97
00:06:11,199 --> 00:06:13,800
Et enfin, beaucoup d'autres choses,
sur lesquelles nous allons passer aujourd'hui.

98
00:06:13,800 --> 00:06:20,559
En 2011, il y a quelques années, le nom a été
définitivement changé et standardisé en OCaml.

99
00:06:20,559 --> 00:06:23,349
Mais maintenant vous savez d'où cela vient.

100
00:06:23,349 --> 00:06:26,300
Donc, au fil des ans, OCaml est devenu plus attractif.

101
00:06:26,300 --> 00:06:31,480
Et aujourd'hui, vous avez
une quantité incroyable d'utilisateurs merveilleux

102
00:06:31,480 --> 00:06:36,139
qui utilisent le riche ensemble de fonctionnalités
uniques qui sont fournies par le système.

103
00:06:36,139 --> 00:06:40,729
Mais il vaut mieux que vous ne croyiez pas ce que
nous allons vous dire.

104
00:06:40,729 --> 00:06:46,660
Il est bien mieux d'écouter ce que les utilisateurs
d'OCaml eux-mêmes ont à dire sur le langage

105
00:06:46,660 --> 00:06:48,439
et pourquoi ils ont choisi celui-ci.

106
00:06:48,439 --> 00:06:50,400
Nous verrons tout cela dans la séquence suivante.

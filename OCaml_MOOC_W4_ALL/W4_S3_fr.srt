1
00:00:00,199 --> 00:00:05,390
Dans cette séquence, on va voir l'application partielle
de fonctions, qui est en fait l'un des traits

2
00:00:05,390 --> 00:00:11,080
intéressants et surprenants de OCaml. Qu'est-ce que
ça veut dire ? Eh bien, comme expliqué

3
00:00:11,080 --> 00:00:15,400
dans la séquence précédente, lorsqu'on écrit
la définition d'une fonction à plusieurs

4
00:00:15,400 --> 00:00:22,400
arguments sous la forme par exemple
<u>let f1 = fun x y -> ...</u> expression du corps, alors

5
00:00:22,400 --> 00:00:29,760
c'est exactement pareil que définir <u>f</u> comme une
fonction qui prend d'abord un <u>x</u> et renvoie une autre

6
00:00:29,760 --> 00:00:37,750
fonction qui prend <u>y</u> et enfin renvoie le corps
<u>exp</u>. Maintenant, puisque les deux définitions

7
00:00:37,750 --> 00:00:42,940
sont précisément la même chose, et puisque dans
la deuxième forme, on voit que cette fonction

8
00:00:42,940 --> 00:00:48,750
peut être appliquée à un argument unique, cela
doit être vrai pour la première définition. Et

9
00:00:48,750 --> 00:00:55,149
c'est justement l'application partielle de fonction.
Donc <u>f1</u> qui semble être une fonction qui attend

10
00:00:55,149 --> 00:01:02,630
obligatoirement deux arguments peut en effet être
appliquée à un seul argument. Et qu'obtient-on alors ?

11
00:01:02,630 --> 00:01:08,429
Eh bien comme on peut le voir très facilement quand
on regarde la forme équivalente de cette application,

12
00:01:08,429 --> 00:01:14,530
ce qu'on obtient est une fonction qui prend le
deuxième argument <u>y</u> et enfin renvoie

13
00:01:14,530 --> 00:01:16,240
le corps.

14
00:01:16,240 --> 00:01:23,249
Voyons ce que donne l'application partielle de fonction
sur un petit exemple jouet. Ici on a d'abord

15
00:01:23,249 --> 00:01:29,859
défini la fonction <u>f1</u> qui prend trois
arguments. En observant le type de la

16
00:01:29,859 --> 00:01:35,729
fonction obtenue on voit que <u>f1</u>
attend trois arguments qui

17
00:01:35,729 --> 00:01:41,810
sont des entiers et renvoie une valeur entière.
On peut ainsi faire une application partielle de la

18
00:01:41,810 --> 00:01:48,759
fonction <u>f1</u> sur un seul argument et on appellera
le résultat <u>f2</u>. Ce qu'on obtient alors

19
00:01:48,759 --> 00:01:54,880
est une fonction qui prend seulement deux arguments
et retourne un entier, qui peut être lue comme

20
00:01:54,880 --> 00:02:00,469
la fonction <u>f1</u> où on a déjà appliqué un argument
mais où les deux autres manquent encore.

21
00:02:00,469 --> 00:02:06,189
Maintenant, on recommence de même façon : on prend la
fonction <u>f2</u>, on l'applique à un argument entier

22
00:02:06,189 --> 00:02:12,370
et on appelle le résultat <u>f3</u>. Ce qu'on obtient
alors est une fonction <u>f3</u> qui prend

23
00:02:12,370 --> 00:02:18,110
un seul argument : le dernier argument de <u>f1</u>
qui manque encore, et qui renvoie une valeur

24
00:02:18,110 --> 00:02:24,890
entière. Et enfin, quand on prend cette fonction
<u>f3</u> et qu'on l'applique enfin à un entier

25
00:02:24,890 --> 00:02:31,540
on obtient comme prévu la valeur 9 qu'on aurait eu
en appliquant la fonction <u>f1</u> à

26
00:02:31,540 --> 00:02:37,180
1, 2 et 4 dès le départ.

27
00:02:37,180 --> 00:02:42,519
Avant de vous expliquer pourquoi l'application
partielle de fonction est en fait très utile

28
00:02:42,519 --> 00:02:47,140
en programmation fonctionnelle revenons un peu en
arrière et regardons ce qui se passe exactement

29
00:02:47,140 --> 00:02:53,329
lorsqu'on applique une expression de fonction à une
expression d'argument. Eh bien, on devrait d'abord

30
00:02:53,329 --> 00:02:59,159
évaluer les deux expressions: l'expression de fonction
et l'expression de l'argument et puis on prendrait

31
00:02:59,159 --> 00:03:04,819
le corps de la fonction, <u>e</u> dans notre exemple,
et on l'évaluerait dans un environnement, dans

32
00:03:04,819 --> 00:03:11,450
un contexte qui contient le contexte précédent
augmenté de la liaison du paramètre formel

33
00:03:11,450 --> 00:03:15,780
<u>x</u> au paramètre effectif qui est la valeur
de <u>a</u>.

34
00:03:15,780 --> 00:03:21,129
Ici, il est très important de noter que chaque fois que
vous faites une évaluation le fait d'avoir une

35
00:03:21,129 --> 00:03:28,159
flèche fonctionnelle bloque en fait toute évaluation,
ce qui signifie qu'on n'aura jamais d'évaluation

36
00:03:28,159 --> 00:03:39,260
sous une flèche fonctionnelle. Et cela, je vais
vous le montrer sur l'exemple suivant.

37
00:03:39,260 --> 00:03:44,430
Maintenant, je voudrais vous démontrer qu'aucun calcul
ne s'effectuera en

38
00:03:44,430 --> 00:03:50,920
OCaml au-dessous de l'abstraction fonctionnelle. Pour
vous montrer cela regardons la fonction <u>f1</u>,

39
00:03:50,920 --> 00:03:57,489
<u>f1</u> prend deux arguments et dès qu'on
évalue <u>f1</u> sur ses deux arguments, cela

40
00:03:57,489 --> 00:04:05,249
déclenche une erreur, car on essaie de faire une
division par zéro. Donc, soumettons ceci au toplevel.

41
00:04:05,249 --> 00:04:08,489
Jusqu'ici le toplevel n'a pas détecté cette sorte
d'erreur, car bien sûr il ne peut pas le savoir

42
00:04:08,489 --> 00:04:14,939
et il indique juste le bon type <u>int -> int -> int</u>.
Maintenant, on va faire une application partielle.

43
00:04:14,939 --> 00:04:22,220
A priori on pourrait s'attendre à ce que dès que l'on donne
la valeur de <u>x</u> alors on pourrait peut-être

44
00:04:22,220 --> 00:04:28,520
déjà faire une évaluation de <u>x</u> divisé par zéro
et provoquer l'erreur. Or cela ne se produira pas,

45
00:04:28,520 --> 00:04:34,010
Pourquoi ? Parce que ce calcul est encore protégé
par l'abstraction fonctionnelle qui est derrière

46
00:04:34,010 --> 00:04:40,670
le <u>fun y</u> et qui attend un second argument. Donc,
quand on soumet ceci au toplevel on obtient

47
00:04:40,670 --> 00:04:45,690
juste une nouvelle fonction, qui attend encore
<u>y</u> et c'est pourquoi on a ici une fonction

48
00:04:45,690 --> 00:04:50,560
qui prend encore un entier et renvoie une
valeur entière.

49
00:04:50,560 --> 00:04:57,500
Si enfin on applique cette fonction <u>f2</u>
à son tout dernier argument, disons 42, le vrai

50
00:04:57,500 --> 00:05:03,140
calcul prend place et alors, on obtient
bien une erreur d'exécution.

51
00:05:04,340 --> 00:05:10,380
Une fois qu'on a compris ce qui est évalué et ce qui ne
l'est pas dans l'évaluation partielle, on peut utiliser

52
00:05:10,390 --> 00:05:16,640
cette connaissance pour optimiser notre fonction
afin de profiter de l'évaluation partielle. Parfois

53
00:05:16,640 --> 00:05:22,310
il est en effet possible qu'une fonction fasse déjà une
partie de son travail lorsque quelques-uns seulement de

54
00:05:22,310 --> 00:05:28,360
ses premiers arguments sont fournis. Si c'est le cas,
alors on doit en fait déplacer

55
00:05:28,360 --> 00:05:35,300
cette partie du calcul hors de la flèche fonctionnelle
pour calculer avant d'aller à l'intérieur de

56
00:05:35,300 --> 00:05:41,640
la prochaine abstraction fonctionnelle. Cela est
démontré sur l'exemple suivant.

57
00:05:43,740 --> 00:05:51,520
On a donc appris aujourd'hui qu'il n'y a pas de calcul
au-dessous de l'abstraction fonctionnelle. C'est

58
00:05:51,530 --> 00:05:56,580
un peu gênant parce que parfois on
aimerait profiter de l'évaluation partielle

59
00:05:56,580 --> 00:06:04,130
et faire déjà une certaine partie du calcul
quand une partie seulement des arguments sont passés

60
00:06:04,130 --> 00:06:09,430
à la fonction. Par exemple jetons un oeil sur
cette définition de la fonction <u>egal</u>

61
00:06:09,430 --> 00:06:15,020
qui est censée comparer l'ordre de deux listes.
Bien sûr, un moyen efficace de le faire

62
00:06:15,020 --> 00:06:23,870
est de prendre les deux listes, les trier,
puis comparer ensuite les résultats. C'est

63
00:06:23,870 --> 00:06:29,340
la définition que nous avons ici, et comme on peut le
voir, on obtient une fonction polymorphe

64
00:06:29,340 --> 00:06:35,750
qui prend deux listes d'éléments
du même type et renvoie une valeur booléenne.

65
00:06:35,750 --> 00:06:44,110
On pourrait alors utiliser l'application partielle par
exemple pour comparer plusieurs listes à une seule

66
00:06:44,110 --> 00:06:51,060
liste fixée, cela a donc un sens de faire une
application partielle de notre fonction <u>egal</u>

67
00:06:51,060 --> 00:06:57,700
à la première liste qui devrait rester la
même pour toutes les autres applications. Donc, si on

68
00:06:57,700 --> 00:07:02,840
fait cela, selon notre principe de l'application
partielle, on obtient une fonction qui prend

69
00:07:02,840 --> 00:07:08,030
une autre liste, dans ce cas, on sait que ce doit être
une liste d'entiers, et qui retourne un booléen, donc

70
00:07:08,030 --> 00:07:16,040
on peut prendre cette fonction et l'appliquer
à une autre liste et observer le résultat.

71
00:07:16,040 --> 00:07:23,500
Voilà, cela semble bien, cependant, puisqu'on a appris
maintenant qu'en réalité aucun calcul ne peut avoir lieu

72
00:07:23,500 --> 00:07:30,590
sous l'abstraction fonctionnelle, on saura que
cela ne nous donne aucun avantage en efficacité.

73
00:07:30,590 --> 00:07:35,780
En fait ce qu'on aimerait maintenant avoir c'est
que dès que l'on donne un premier argument

74
00:07:35,780 --> 00:07:42,710
on puisse déjà trier ce premier argument une fois pour
toutes pour ensuite obtenir le deuxième

75
00:07:42,710 --> 00:07:49,860
argument, le trier et
comparer le résultat au premier argument trié.

76
00:07:49,860 --> 00:07:54,770
Si on veut cela alors on doit changer la façon dont
notre définition est écrite et tirez le

77
00:07:54,770 --> 00:08:00,530
tri, le calcul du premier paramètre seulement en dehors
de l'abstraction fonctionnelle. Et

78
00:08:00,530 --> 00:08:07,560
c'est la forme qui est maintenant écrite ici : si on
soumet ceci maintenant à notre toplevel on

79
00:08:07,560 --> 00:08:12,790
obtient bien sûr une fonction exactement du
même type, c'est juste que le calcul

80
00:08:12,790 --> 00:08:20,260
peut déjà être effectué un peu plus tôt sur le premier
paramètre seulement. Alors on peut faire exactement

81
00:08:20,260 --> 00:08:25,570
le même genre d'application : d'abord une
application partielle de notre nouvelle fonction à une

82
00:08:25,570 --> 00:08:33,520
première liste et appliquer le résultat à une seconde
liste et on voit qu'elle se comporte de manière

83
00:08:33,520 --> 00:08:36,920
identique.

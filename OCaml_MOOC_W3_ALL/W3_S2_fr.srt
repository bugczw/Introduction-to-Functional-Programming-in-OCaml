1
00:00:00,400 --> 00:00:01,449
Re-bonjour

2
00:00:01,449 --> 00:00:09,000
Dans cette séquence, on verra que les types récursifs
peuvent être utilisés non seulement pour définir

3
00:00:09,000 --> 00:00:16,880
des structures de listes, mais qu'en fait ils sont
assez généraux pour des représentations arborescentes.

4
00:00:18,100 --> 00:00:23,920
Pour comprendre cela nous allons revenir à
nos exemples sur les bases de données.

5
00:00:25,009 --> 00:00:32,309
Donc, le type de bases de données peut être désormais
le type somme suivant.

6
00:00:33,200 --> 00:00:40,200
Une base de données peut être vide, auquel cas elle
n'a aucun contact.

7
00:00:40,200 --> 00:00:51,960
Ou elle peut être un noeud qui possède un contact,
un fils gauche qui est une base de données et un

8
00:00:51,960 --> 00:00:54,280
fils droit qui est aussi une base de données.

9
00:00:54,280 --> 00:01:01,860
Donc c'est vraiment une représentation en arbre d'une
base de données, mais nous allons aussi appliquer un

10
00:01:01,860 --> 00:01:04,800
invariant à la structure de données.

11
00:01:05,440 --> 00:01:13,950
Le fait est que si on a un <u>DataNode</u> avec un fils
<u>left</u>, un contact <u>c</u> et un fils droit

12
00:01:13,970 --> 00:01:24,130
<u>right</u>, alors il est bien formé que si chaque contact dans
<u>left</u> est lexicographiquement plus petit que

13
00:01:24,130 --> 00:01:31,950
<u>c</u> et que chaque chaque contact dans <u>right</u> est
lexicographiquement plus grand que <u>c</u>.

14
00:01:31,950 --> 00:01:39,970
Par exemple ceci est une représentation
de la base de données dans la machine.

15
00:01:40,780 --> 00:01:48,040
Ce qu'on obtient est une racine avec un
<u>DataNode</u> contenant le contact <u>luke</u>.

16
00:01:48,840 --> 00:01:56,560
À sa gauche, il y a un autre <u>DataNode</u> qui
n'a pas de fils, mais un contact nommé <u>leila</u>.

17
00:01:58,180 --> 00:02:05,340
Et à sa droite on a un autre <u>DataNode</u> sans
fils, mais un contact nommé <u>yoda</u>.

18
00:02:07,100 --> 00:02:14,720
Et cette valeur est bien valide par rapport
à notre invariant.

19
00:02:14,730 --> 00:02:19,859
Revenons maintenant à notre fonction de recherche
dans la base de données.

20
00:02:19,859 --> 00:02:23,959
C'est maintenant un parcours d'arbre défini
par induction.

21
00:02:25,900 --> 00:02:32,739
Dans le cas où la base de données est <u>NoContact</u>
cela signifie que cette base est vide.

22
00:02:32,739 --> 00:02:34,800
Donc, on renvoie une erreur.

23
00:02:35,100 --> 00:02:40,960
Sinon, si la base de données est composée d'un noeud
alors il y a plusieurs cas.

24
00:02:42,499 --> 00:02:51,099
Si le contact sur le noeud a le même nom
que le nom recherché, on a trouvé

25
00:02:51,099 --> 00:02:53,930
ce contact et il suffit de le renvoyer.

26
00:02:53,930 --> 00:03:00,239n
Si le nom recherché est plus petit
que le nom du contact sur le noeud alors

27
00:03:00,860 --> 00:03:02,380
on cherche dans la partie gauche.

28
00:03:03,640 --> 00:03:11,559
Sinon, si le nom est plus grand quel le nom du contact
sur le noeud on cherche

29
00:03:11,559 --> 00:03:13,260
dans la partie droite.

30
00:03:13,260 --> 00:03:21,100
Dans le pire des cas, cette fonction est incapable
de trouver le contact que l'on recherche.

31
00:03:21,760 --> 00:03:26,800
Cela signifie que l'arbre a été traversé
de la racine vers une feuille.

32
00:03:28,389 --> 00:03:36,329
Ainsi, le nombre de noeuds traversés
le long de ce chemin est limité par la hauteur

33
00:03:36,329 --> 00:03:37,730
de l'arbre.

34
00:03:37,730 --> 00:03:45,170
Au contraire, la mise en oeuvre à base de tableau
que nous avons fait la semaine dernière

35
00:03:46,829 --> 00:03:50,709
demandait de traverser toute la base de données.

36
00:03:51,900 --> 00:03:56,440
Il est peu probable que la hauteur de l'arbre
soit égale au nombre de contacts

37
00:03:56,959 --> 00:04:01,339
car cela signifierait que l'arbre a dégénéré
en liste.

38
00:04:02,980 --> 00:04:09,140
En fait, il est possible de faire respecter
l'invariant que l'arbre est équilibré

39
00:04:09,940 --> 00:04:13,560
et que sa hauteur est majorée par le logarithme
du nombre de contacts.

40
00:04:14,820 --> 00:04:21,220
Ainsi, cette fonction de recherche peut être rendue
logarithmique en la taille de la base de données

41
00:04:21,220 --> 00:04:26,320
ce qui est très efficace par rapport à la
recherche en complexité linéaire.

42
00:04:27,289 --> 00:04:32,009
Maintenant, revenons à l'insertion d'un contact
à l'intérieur de la base de données.

43
00:04:33,140 --> 00:04:38,979
Encore une fois cette fonction sera une traversée
de l'arbre définie par récursion

44
00:04:38,979 --> 00:04:43,219
et par analyse de cas sur la forme de l'arbre

45
00:04:44,419 --> 00:04:48,430
Si l'arbre n'a pas de contact, donc si la base de données
est vide

46
00:04:48,430 --> 00:04:53,400
alors on renvoie juste une nouvelle base de données

47
00:04:53,400 --> 00:05:02,139
qui contient un seul noeud constitué du
contact avec deux fils vides.

48
00:05:02,139 --> 00:05:07,870
Si la base de données est un noeud avec <u>contact'</u>
comme racine

49
00:05:07,870 --> 00:05:14,810
on compare d'abord le nom de ce contact
avec le nom du contact que nous essayons d'insérer

50
00:05:16,160 --> 00:05:20,080
S'ils sont égaux alors il n'y a rien à changer
et on peut renvoyer l'arbre tel quel.

51
00:05:21,939 --> 00:05:29,639
Si maintenant le nom du contact est plus petit que
le contact sur le noeud

52
00:05:30,520 --> 00:05:36,920
alors on sait qu'il faut insérer ce contact
sur la gauche de l'arbre

53
00:05:38,100 --> 00:05:42,700
et on réutilise le même arbre sur la droite.

54
00:05:45,560 --> 00:05:54,180
On a donc le même arbre pour la base de données
initiale et pour la base de données en sortie.

55
00:05:55,800 --> 00:06:04,760
Sinon, si le nom du contact est supérieur au
contact à la racine

56
00:06:05,720 --> 00:06:09,520
alors le contact doit être inséré sur la droite

57
00:06:09,520 --> 00:06:22,420
et on peut là aussi réutiliser le sous-arbre gauche
de la base de données en entrée.

58
00:06:24,069 --> 00:06:27,500
Graphiquement, nous avons quelque chose comme ça.

59
00:06:29,710 --> 00:06:38,800
A partir d'une base de données en entrée, une nouvelle
base de données où est inséré un nouveau noeud <u>8</u>,

60
00:06:40,820 --> 00:06:48,940
n'a qu'un nouveau noeud sur le chemin de la racine
au nouveau noeud.

61
00:06:51,420 --> 00:06:58,740
Et beaucoup de sous-arbres, ici, sur les arbres gauches,
peuvent être réutilisés en les

62
00:07:00,780 --> 00:07:03,000
prenant dans la base de données en entrée.

63
00:07:05,360 --> 00:07:12,940
En comparant avec la mise en oeuvre basée sur des
tableaux, cette représentation arborescente

64
00:07:12,949 --> 00:07:18,649
permet plus de partage entre les différentes
versions de notre base de données.

65
00:07:21,240 --> 00:07:27,740
Parlons maintenant de la suppression d'un élément dans
cette représentation arborescente de base de données.

66
00:07:29,740 --> 00:07:33,500
Imaginons que nous enlevions la racine de cet
arbre.

67
00:07:34,800 --> 00:07:40,560
On obtient alors deux sous-arbres et on doit
fusionner

68
00:07:40,560 --> 00:07:49,200
ces deux sous-arbres pour former un nouvel arbre
mais c'est un peu compliqué.

69
00:07:50,000 --> 00:07:55,439
Et on devrait pouvoir se concentrer sur ce problème

70
00:07:55,439 --> 00:07:58,939
qui est un problème sur les arbres

71
00:07:58,939 --> 00:08:03,259
indépendamment du fait qu'ils représentent
une base de données.

72
00:08:04,640 --> 00:08:10,879
Nous allons le faire en appliquant le principe
de la séparation des tâches.

73
00:08:11,940 --> 00:08:17,120
Pour mettre en oeuvre ce principe de la séparation
des tâches

74
00:08:17,120 --> 00:08:26,500
on devra utiliser les types paramétrés, qui
permettent d'effectuer un développement modulaire

75
00:08:27,200 --> 00:08:30,500
et qui seront présentés dans une séquence à venir.

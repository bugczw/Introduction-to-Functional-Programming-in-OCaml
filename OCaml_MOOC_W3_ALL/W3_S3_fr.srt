1
00:00:00,260 --> 00:00:05,269
Bienvenue dans cette nouvelle séquence.

2
00:00:05,269 --> 00:00:10,200
Au cours de cette séquence,
nous réaliserons un générateur d'histoires.

3
00:00:10,200 --> 00:00:15,740
Vous avez déjà vu que les types jouent
un rôle central dans la programmation en OCaml.

4
00:00:15,740 --> 00:00:23,160
Et c'est très courant parmi les programmeurs OCaml,
de dire que

5
00:00:23,160 --> 00:00:31,500
dès qu'on a les bonnes déclarations de type,
alors on n'est plus très loin du bon programme.

6
00:00:31,570 --> 00:00:38,500
Et c'est pourquoi nous allons suivre
ce genre de méthode de programmation,

7
00:00:38,500 --> 00:00:44,100
appelé la programmation "dirigée par les types"
pour réaliser notre générateur d'histoires.

8
00:00:46,399 --> 00:00:52,579
Voyons maintenant comment réaliser
un générateur d'histoires.

9
00:00:54,900 --> 00:01:03,000
Ce que je veux illustrer dans cette démo
est que l'on peut d'abord écrire

10
00:01:03,000 --> 00:01:08,280
des déclarations de type très spécifiques à OCaml
pour préciser le problème,

11
00:01:08,280 --> 00:01:14,180
la structure que l'on essaye de calculer.

12
00:01:14,180 --> 00:01:19,500
Ensuite, on a juste à suivre
la structure de ces types

13
00:01:19,500 --> 00:01:26,810
pour trouver quels genres de fonctions à réaliser.

14
00:01:26,810 --> 00:01:33,670
Je ne vais pas donner tous les détails de cette
réalisation, mais vous pouvez les trouver en ligne.

15
00:01:33,670 --> 00:01:38,200
Donc, commençons par la déclaration de type.

16
00:01:38,200 --> 00:01:43,650
Pour réaliser un générateur d'histoires, on doit
comprendre ce qu'est une histoire.

17
00:01:44,600 --> 00:01:52,500
On peut dire que l'histoire est un contexte initial
où l'histoire commence.

18
00:01:54,000 --> 00:02:02,140
Dans ce contexte, il y a un événement perturbant,
quelque chose qui arrive.

19
00:02:02,140 --> 00:02:09,090
Et ces choses génèrent une aventure,
une liste d'événements

20
00:02:09,090 --> 00:02:15,400
ce qui va nous mener à la conclusion de l'histoire
qui est habituellement un contexte

21
00:02:15,400 --> 00:02:22,849
dans lequel les personnages sont heureux.

22
00:02:22,849 --> 00:02:28,370
Donc [context] est constitué d'une liste de personnages.

23
00:02:28,370 --> 00:02:38,739
Et un [personnage] sera caractérisé par un
[name], un [state] et une [location].

24
00:02:38,739 --> 00:02:46,590
Ensuite, on continue de préciser
en disant qu'un [event] peut être

25
00:02:48,000 --> 00:02:52,529
externe, être produit par l'environnement
sur le personnage.

26
00:02:52,529 --> 00:02:53,769
Quelque chose se passe.

27
00:02:53,769 --> 00:03:04,870
Ou bien, ce peut être aussi une action du personnage
sur le contexte.

28
00:03:04,870 --> 00:03:10,749
On a donc maintenant la structure générale
d'une histoire,

29
00:03:10,749 --> 00:03:21,700
et on peut essayer de trouver de beaux exemples, par
exemple, de ce que peut être le [state] d'un personnage.

30
00:03:21,749 --> 00:03:27,349
Un personnage peut être [Happy] ou [Hungry]
dans notre cas.

31
00:03:30,389 --> 00:03:39,150
Et dans notre histoire un personnage peut faire deux
choses, il peut manger ou aller au restaurant.

32
00:03:40,100 --> 00:03:48,300
Il peut également être situé dans deux endroits
différents : un appartement ou le restaurant.

33
00:03:48,349 --> 00:03:52,139
Nous en avons terminé
avec les déclarations de type, et en fait,

34
00:03:52,139 --> 00:03:59,040
c'est une information très importante
pour le développement.

35
00:03:59,040 --> 00:04:04,000
Pour le comprendre je vais vous montrer plusieurs
fonctions qui sont dirigées

36
00:04:04,500 --> 00:04:07,909
par la forme de cette déclaration de type.

37
00:04:07,909 --> 00:04:14,090
La première est la fonction nommée [make_story].

38
00:04:15,000 --> 00:04:17,320
La voici.

39
00:04:17,320 --> 00:04:22,080
[make_story], ici, prend un contexte initial,

40
00:04:23,690 --> 00:04:28,130
choisit une perturbation au hasard,

41
00:04:28,750 --> 00:04:33,200
quelque chose qui se passe dans le contexte initial.

42
00:04:33,200 --> 00:04:42,090
Et après cela, [make_story] tente de mettre fin à
l'histoire en trouvant une séquence d'événements qui

43
00:04:42,090 --> 00:04:48,100
conduit à un contexte qui est heureux.

44
00:04:48,100 --> 00:04:51,010
En fin de compte l'histoire est :

45
00:04:51,010 --> 00:04:56,690
le contexte initial, la perturbation,
l'aventure, et la conclusion,

46
00:04:56,690 --> 00:05:00,750
qui a été construite par les deux fonctions précédentes.

47
00:05:03,970 --> 00:05:07,310
Maintenant, comment finit-on une histoire ?

48
00:05:07,310 --> 00:05:14,030
C'est une fonction récursive qui recommence
tant que le contexte n'est pas heureux.

49
00:05:14,030 --> 00:05:18,820
Donc, quand il est heureux, on a terminé et
on peut renvoyer la liste des événements

50
00:05:18,820 --> 00:05:23,480
qui se sont accumulés le long de la récursion.

51
00:05:23,480 --> 00:05:28,100
Sinon, on doit trouver quelque chose
qui peut arriver.

52
00:05:28,140 --> 00:05:29,840
Un événement.

53
00:05:29,840 --> 00:05:39,700
Et cet événement mène à un nouveau contexte
à partir duquel on fait un appel récursif.

54
00:05:39,780 --> 00:05:44,300
Que signifie être un contexte heureux ?

55
00:05:44,300 --> 00:05:48,400
Eh bien, nous avons les personnages de notre contexte,

56
00:05:48,400 --> 00:05:57,000
et nous dirons que si tous les personnages sont heureux,
alors nous sommes dans un contexte heureux.

57
00:05:57,090 --> 00:06:02,410
Comme on peut le voir, on peut donc continuer
à analyser ce programme comme ça,

58
00:06:04,040 --> 00:06:10,920
les fonctions sont assez simples parce que toute
l'intelligence pour résoudre ce problème se trouve

59
00:06:10,920 --> 00:06:12,400
dans la déclaration de type.

60
00:06:13,320 --> 00:06:18,000
La seule chose que l'on fait lorsqu'on réalise
une fonction est de suivre la structure

61
00:06:18,000 --> 00:06:22,250
des types que l'on a défini.

62
00:06:22,250 --> 00:06:29,750
Donc à la fin, une fois que l'on a pu
générer une histoire, on peut la raconter.

63
00:06:30,860 --> 00:06:42,100
Et à nouveau, en suivant la structure des types, on
peut écrire une fonction de type [story -> string].

64
00:06:42,120 --> 00:06:47,590
Par exemple, lorsque vous racontez une histoire,
vous commencez par "Il était une fois".

65
00:06:47,590 --> 00:06:50,810
Vous dites quel est le contexte initial.

66
00:06:50,810 --> 00:06:57,630
Vous dites qu'un jour quelque chose de mal est arrivé
et vous décrivez cet événement.

67
00:06:58,420 --> 00:07:02,060
Après quoi vous racontez l'histoire.

68
00:07:02,830 --> 00:07:07,790
Et vous concluez en disant que
"A la fin, la paix a été restaurée".

69
00:07:09,310 --> 00:07:11,210
Et vous décrivez le contexte final.

70
00:07:11,850 --> 00:07:21,200
Par exemple, voici une histoire qui commence
avec Sophie, heureuse dans l'appartement,

71
00:07:21,200 --> 00:07:25,110
et Socrate, heureux dans l'appartement aussi.

72
00:07:27,790 --> 00:07:33,220
Donc, nous avons vu que les types sont très pratiques
pour diriger le programmeur

73
00:07:33,220 --> 00:07:36,960
dans ce qui doit être mis en œuvre et quand.

74
00:07:36,960 --> 00:07:42,180
Mais pour le moment, nous devons admettre
que nos histoires sont un peu ennuyeuses.

75
00:07:43,310 --> 00:07:51,530
Nous voulons préciser certaines déclarations de type
afin d'améliorer la qualité de ces histoires.

76
00:07:51,530 --> 00:07:59,460
Ce que nous allons voir est que le vérificateur de
type peut nous aider en identifiant

77
00:07:59,460 --> 00:08:03,110
quelle partie du code doit être mise à jour.

78
00:08:03,110 --> 00:08:09,770
Donc maintenant, on va supposer que nos personnages
sont des zombies et que le restaurant peut être fermé.

79
00:08:12,950 --> 00:08:18,420
Alors maintenant, si nous voulons générer
des histoires plus intéressantes

80
00:08:18,420 --> 00:08:23,000
nous pouvons supposer que
nos personnages sont des zombies

81
00:08:23,000 --> 00:08:31,000
et qu'ils peuvent faire une action supplémentaire,
qui est...

82
00:08:31,000 --> 00:08:33,870
manger un être humain !

83
00:08:33,870 --> 00:08:39,850
Nous devons donc changer le type qui décrit
les actions possibles pour nos personnages

84
00:08:39,850 --> 00:08:48,570
et ce changement, bien entendu, a un impact
sur les fonctions qui doivent être écrites.

85
00:08:49,960 --> 00:08:56,730
L'idée est que si je demande au vérificateur de type
de vérifier maintenant mon programme

86
00:08:56,730 --> 00:09:00,550
il va identifier quelles fonctions doivent être
mises à jour.

87
00:09:01,200 --> 00:09:10,240
Ici par exemple, je peux lire qu'une fonction
n'est plus exhaustive

88
00:09:10,580 --> 00:09:16,240
parce que je dois traiter le cas où
l'action est manger un humain.

89
00:09:18,920 --> 00:09:23,900
Une autre remarque porte sur la concision
de votre programme.

90
00:09:25,690 --> 00:09:33,550
Dans la première version de notre conteur,
nous avons dû écrire 178 lignes de code.

91
00:09:34,250 --> 00:09:42,690
En fait, un programmeur OCaml entraîné
aurait écrit le même code en moins de lignes.

92
00:09:44,770 --> 00:09:53,810
Et son secret est de remplacer ce genre de fonction à
l'aide d'un programme d'une ligne comme ça.

93
00:09:53,810 --> 00:10:01,130
L'ingrédient de base de ce secret est
l'utilisation des fonctions d'ordre supérieur.

94
00:10:01,130 --> 00:10:04,230
Heureusement pour vous,
c'est le sujet de la semaine prochaine.

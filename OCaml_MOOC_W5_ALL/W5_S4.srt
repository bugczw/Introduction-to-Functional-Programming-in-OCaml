1
00:00:00,220 --> 00:00:05,480
In this sequence, we will find our first mutable
data structures, which are the arrays.

2
00:00:05,480 --> 00:00:12,670
We have met the array data structure back
in the course on week 2, sequence 3.

3
00:00:12,670 --> 00:00:15,480
That's a very interesting data structure,
because of fixed size,

4
00:00:15,480 --> 00:00:19,410
it allows us a direct access to the elements
in constant time

5
00:00:19,410 --> 00:00:24,980
and indeed it is particularly well-adapted
to be used with loop constructs like the one

6
00:00:24,980 --> 00:00:26,269
we have just seen.

7
00:00:26,269 --> 00:00:29,810
Let's refresh our memory with a simple exercise:

8
00:00:29,810 --> 00:00:36,110
let's write some code that uses an array to
find all the integers which are cubes and

9
00:00:36,110 --> 00:00:39,090
also squares.

10
00:00:39,090 --> 00:00:43,340
So let's compute these cube numbers which
are also squares.

11
00:00:43,340 --> 00:00:46,629
First of all, we define a function <u>cubes</u>
of <u>n</u>

12
00:00:46,629 --> 00:00:51,070
that creates an array initialized with the
cubes of each of the indexes.

13
00:00:51,070 --> 00:01:00,840
Okay, then we define our own petty function
to compute a square root of an integer

14
00:01:00,840 --> 00:01:05,339
and a function to check wether an integer
is actually a square.

15
00:01:05,339 --> 00:01:06,979
Once we have all this,

16
00:01:06,979 --> 00:01:15,100
then computing all the cubes which are also
squares up to <u>n</u> is not very difficult,

17
00:01:15,100 --> 00:01:22,310
it's this function we have here: so you see,
basically we create the cubes of the first

18
00:01:22,310 --> 00:01:24,330
<u>n</u> integers,

19
00:01:24,330 --> 00:01:28,930
then we iterate over them with a for loop
we have learnt to use

20
00:01:28,930 --> 00:01:38,079
and if we find one element there, which are the
cube of the index and which is also a square we print

21
00:01:38,079 --> 00:01:39,360
it, and that's it.

22
00:01:39,360 --> 00:01:50,590
Okay, so we can test it on 100 and so you see these
are all the cube numbers which are also squares

23
00:01:50,590 --> 00:01:53,840
of integer up to 100.

24
00:01:53,840 --> 00:02:00,229
Now, the good news for some of us is that
OCaml arrays are really real arrays:

25
00:02:00,229 --> 00:02:03,930
not only they can be used like in the previous
example,

26
00:02:03,930 --> 00:02:07,380
but they can also be modified in place.

27
00:02:07,380 --> 00:02:10,849
We do this using a special operator which
is called the update operator,

28
00:02:10,849 --> 00:02:14,110
this backward arrow here,

29
00:02:14,110 --> 00:02:16,640
and yes after performing an update,

30
00:02:16,640 --> 00:02:20,670
the old value is really lost, as you can see
in the following example.

31
00:02:20,670 --> 00:02:27,330
Okay, so let's define again an array, five
elements, like this one.

32
00:02:27,330 --> 00:02:31,980
Of course, we can access the elements in an
array

33
00:02:31,980 --> 00:02:35,810
but now we have discovered we have this new
update operator,

34
00:02:35,810 --> 00:02:38,280
this reversed arrow,

35
00:02:38,280 --> 00:02:42,379
and we can use this update operator to say
that we want to modify the content of the

36
00:02:42,379 --> 00:02:45,230
first cell of the array,

37
00:02:45,230 --> 00:02:48,790
and we change its content by putting 100 inside
it.

38
00:02:48,790 --> 00:02:54,140
As you can see here, the result of the operation
is of the unit type.

39
00:02:54,140 --> 00:02:58,780
But there has been something done as a side
effect.

40
00:02:58,780 --> 00:03:04,010
Indeed, if you look again at the content of
the first cell of the array

41
00:03:04,010 --> 00:03:07,540
now it is 100 and no longer 0 as before.

42
00:03:07,540 --> 00:03:12,420
And naturally, if you look at the array altogether
you see it has been modified.

43
00:03:12,420 --> 00:03:13,920
Now it is the same array as before,

44
00:03:13,920 --> 00:03:18,470
we didn't create a copy of the array by making
up a change in some place,

45
00:03:18,470 --> 00:03:20,599
it's the same array, but it has been modified
in place.

46
00:03:20,599 --> 00:03:27,200
Well, once we discover that we can update
the content of an array as much as we want

47
00:03:27,200 --> 00:03:35,970
it becomes easy to write operations in traditional
imperative style we are used to in other languages,

48
00:03:35,970 --> 00:03:41,959
like for example we can decide to take an
array and try to rotate its contents on the

49
00:03:41,959 --> 00:03:42,040
left.

50
00:03:42,040 --> 00:03:46,780
This is the function <u>rotate</u> we are defining
here, you see,

51
00:03:46,780 --> 00:03:50,709
it takes an array <u>a</u> here,

52
00:03:50,709 --> 00:03:55,439
then it computes the length of the array by
calling the <u>Array.length</u> function,

53
00:03:55,439 --> 00:03:58,530
then saves the value which is the leftmost,

54
00:03:58,530 --> 00:03:59,909
the one in position 0,

55
00:03:59,909 --> 00:04:01,480
because it will be overwritten,

56
00:04:01,480 --> 00:04:08,409
then with a for loop that we have learnt to
use we shift all the values to the left in

57
00:04:08,409 --> 00:04:13,760
one position and then we restore in the last
position the value of the first cell.

58
00:04:13,760 --> 00:04:23,889
Okay,so we can pass to the compiler
that is very happy we have defined a new function

59
00:04:23,889 --> 00:04:24,440
called <u>rotate</u>

60
00:04:24,440 --> 00:04:28,490
that takes an array which is a polymorphic
array,

61
00:04:28,490 --> 00:04:30,389
no matter what are the elements,

62
00:04:30,389 --> 00:04:34,930
and returns a unit type because of course there
is no actual result there:

63
00:04:34,930 --> 00:04:39,180
the only thing we have done we have modified
in place the content of the array which was

64
00:04:39,180 --> 00:04:41,330
passed as an argument.

65
00:04:41,330 --> 00:04:44,800
Let's try it out.

66
00:04:44,800 --> 00:04:49,590
That's a handy way using a <u>Array.init</u> to
create an array with all the elements from

67
00:04:49,590 --> 00:04:50,699
0 to 9.

68
00:04:50,699 --> 00:04:59,530
You see, now we can decide to rotate this
array once.

69
00:04:59,530 --> 00:05:05,979
And once we have done the rotation of course
you see everything has been shifted to the

70
00:05:05,979 --> 00:05:08,009
left on one place.

71
00:05:08,009 --> 00:05:14,639
We can rotate it again, and it keeps shifting.

72
00:05:14,639 --> 00:05:16,500
You can play the game as much as you want.

73
00:05:16,500 --> 00:05:22,110
Well, that was a very simple example of how
you can use arrays in OCaml

74
00:05:22,110 --> 00:05:25,539
exactly the same way you do it in other programming
languages.

75
00:05:25,539 --> 00:05:30,490
So, a few words on this update operator.

76
00:05:30,490 --> 00:05:35,370
It is use for in place modification in general
so when you see an expression <u>e1</u>,

77
00:05:35,370 --> 00:05:37,690
then the update operator, then <u>e2</u>,

78
00:05:37,690 --> 00:05:42,750
the expression <u>e1</u> is expected to denote
a mutable value and is evaluated.

79
00:05:42,750 --> 00:05:46,289
The type checker actually ensures that <u>e1</u>
is a mutable value.

80
00:05:46,289 --> 00:05:53,699
And this mutable value is modified in place
and the new value is the result of the evaluation

81
00:05:53,699 --> 00:05:54,800
of <u>e2</u>.

82
00:05:54,800 --> 00:06:00,970
The type of the overall operation is just
<u>unit</u>.

83
00:06:00,970 --> 00:06:07,410
To sum up, we have seen that the array data
type we have used a lot up to now is actually mutable

84
00:06:07,410 --> 00:06:14,600
and the update operator is used to modify
in place the cells of the arrays.

